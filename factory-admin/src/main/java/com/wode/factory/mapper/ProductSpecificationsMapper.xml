<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="com.wode.factory.mapper.ProductSpecificationsDao">

	<resultMap id="ProductSpecifications" type="com.wode.factory.model.ProductSpecifications">
        <result property="id" column="id"/>
        <result property="productCode" column="product_code"/>
        <result property="productId" column="product_id"/>
        <result property="cost" column="cost"/>
        <result property="marketPrice" column="market_price"/>
        <result property="price" column="price"/>
        <result property="stock" column="stock"/>
        <result property="itemids" column="itemids"/>
        <result property="itemValues" column="itemValues"/>
        <result property="isDelete" column="isDelete"/>
        <result property="warnnum" column="warnnum"/>
        <result property="maxFucoin" column="maxFucoin"/>
        <result property="sellnum" column="sellnum"/>
        <result property="internalPurchasePrice" column="internal_purchase_price"/>
        <result property="minLimitNum" column="min_limit_num"/>  
        <result property="outerId" column="outer_id"/>   
	</resultMap>
	
	<resultMap id="ProductSpecificationValue" type="com.wode.factory.model.ProductSpecificationValue">
        <result property="id" column="id"/>
        <result property="specificationId" column="specification_id"/>
        <result property="specificationValue" column="specification_value"/>
        <result property="productId" column="product_id"/>
        <result property="isDelete" column="isDelete"/>
        <result property="orders" column="orders"/>
        <result property="specificationName" column="name_specification"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
		id,product_code,product_id,cost,market_price,price,stock,itemids,isDelete,warnnum,itemValues,maxFucoin,sellnum,internal_purchase_price,min_limit_num,outer_id
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO t_product_specifications (
        	id ,
        	product_code ,
        	product_id ,
        	cost ,
        	market_price ,
        	price ,
        	stock ,
        	itemids,
        	isDelete,
        	warnnum,
        	itemValues,
        	maxFucoin,
        	sellnum,
        	internal_purchase_price,
        	min_limit_num,
        	outer_id
        ) VALUES (
        	#{id} ,
        	#{productCode} ,
        	#{productId} ,
        	#{cost} ,
        	#{marketPrice} ,
        	#{price} ,
        	#{stock} ,
        	#{itemids},
        	#{isDelete},
        	#{warnnum},
        	#{itemValues},
        	#{maxFucoin},
        	#{sellnum},
        	#{internalPurchasePrice},
        	#{minLimitNum},
        	#{outerId}
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="update" >
    <![CDATA[
        UPDATE t_product_specifications SET
	        product_code = #{productCode} ,
	        product_id = #{productId} ,
	        cost = #{cost} ,
	        market_price = #{marketPrice} ,
	        price = #{price} ,
	        stock = #{stock} ,
	        itemids = #{itemids},
	        isDelete = #{isDelete},
	        warnnum = #{warnnum},
	        itemValues = #{itemValues},
	        maxFucoin = #{maxFucoin},
	        sellnum=#{sellnum}
        WHERE 
	        id = #{id} 
    ]]>
	</update>
	
	<update id="removeAllByProductid" >
    <![CDATA[
        UPDATE t_product_specifications SET
	        isDelete=#{isDelete}
        WHERE 
	        product_id = #{productid}
    ]]>
	</update>
	
	<delete id="deleteBySupplierId">
	delete from t_product_specifications where product_id in (SELECT id from t_product where supplier_id = #{supplierId})
	</delete>

    <delete id="deleteById">
    <![CDATA[
        DELETE FROM t_product_specifications WHERE
        id = #{id}
    ]]>
    </delete>
    
    <select id="getById" resultMap="ProductSpecifications">
		SELECT <include refid="columns" />
	    <![CDATA[
		    FROM t_product_specifications 
	        WHERE 
		        id = #{id} 
	    ]]>
	</select>
	

		
    <select id="findPage_count" resultType="long">
        SELECT count(*) FROM t_product_specifications 
		<include refid="findPage_where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="ProductSpecifications">
    	SELECT <include refid="columns" />
	    FROM t_product_specifications 
		<include refid="findPage_where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
	<sql id="findPage_where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND id = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(productCode)">
				AND product_code = #{productCode}
			</if>
	       <if test="@Ognl@isNotEmpty(productId)">
				AND product_id = #{productId}
			</if>
	       <if test="@Ognl@isNotEmpty(cost)">
				AND cost = #{cost}
			</if>
	       <if test="@Ognl@isNotEmpty(marketPrice)">
				AND market_price = #{marketPrice}
			</if>
	       <if test="@Ognl@isNotEmpty(price)">
				AND price = #{price}
			</if>
	       <if test="@Ognl@isNotEmpty(stock)">
				AND stock = #{stock}
			</if>
			<if test="@Ognl@isNotEmpty(itemids)">
				AND itemids = #{itemids}
			</if>
		</where>
	</sql>
	
	<select id="findlistByProductid" resultMap="ProductSpecifications">
		SELECT id,product_code,product_id,cost,market_price,min_limit_num,price,itemids,isDelete,warnnum,itemValues,maxFucoin,sellnum,internal_purchase_price,(select quantity from t_inventory where productSpecificationsId=t_product_specifications.id  limit 1)stock
	    <![CDATA[
		    FROM t_product_specifications
	        WHERE 
		        product_id = #{productid} and isDelete=0
	    ]]>
	</select>
	
	<select id="getlistByProductid" resultMap="ProductSpecifications">
		SELECT <include refid="columns" />
	    <![CDATA[
		    FROM t_product_specifications 
	        WHERE 
		        product_id = #{id}  AND isDelete=0
	    ]]>
	</select>
	<!-- 通过商家id获取商品的sku信息 -->
	<select id="findlistBySupplierId" resultType="java.math.BigDecimal">
		select avg((price-maxFucoin)/price)
 			FROM t_product_specifications
	        WHERE 
		        product_id in (SELECT id FROM t_product where is_marketable=1 and supplier_id=#{supplierId})
		    AND isDelete=0
	</select>
	
	<select id="findProductSpecificationValueBymap" resultMap="ProductSpecificationValue">
    	SELECT psv.*,IFNULL(spe.name,sspe.name) as name_specification from t_product_specification_value AS psv
		LEFT JOIN t_specification as spe on spe.id = psv.specification_id
		LEFT JOIN t_supplier_specification as sspe on sspe.id = psv.specification_id
		where psv.product_id=#{productId} AND psv.isdelete=0
		<if test="@Ognl@isNotEmpty(specificationId)">
			AND psv.specification_id = #{specificationId}
		</if>
       <if test="@Ognl@isNotEmpty(specificationValue)">
			AND psv.specification_value = #{specificationValue}
		</if>
		ORDER BY psv.orders
    </select>
</mapper>

