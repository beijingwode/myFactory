<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->

<mapper namespace="com.wode.factory.mapper.SaleDetailDao">

	<resultMap id="SaleDetail" type="com.wode.factory.model.SaleDetail">
        <result property="id" column="id"/>
        <result property="subOrderId" column="subOrderId"/>
        <result property="subOrderItemId" column="subOrderItemId"/>
        <result property="payTime" column="payTime"/>
        <result property="takeTime" column="takeTime"/>
        <result property="returnTime" column="returnTime"/>
        <result property="own" column="own"/>
        <result property="productId" column="productId"/>
        <result property="productName" column="productName"/>
        <result property="skuId" column="skuId"/>
        <result property="categoryId" column="categoryId"/>
        <result property="categoryName" column="categoryName"/>
        <result property="price" column="price"/>
        <result property="carriagePrice" column="carriagePrice"/>        
        <result property="number" column="number"/>
        <result property="allPrice" column="allPrice"/>
        <result property="commissionRatio" column="commissionRatio"/>
        <result property="commission" column="commission"/>
        <result property="payPrice" column="payPrice"/>
        <result property="status" column="status"/>
        <result property="haveCheap" column="haveCheap"/>
        <result property="fuCoin" column="fuCoin"/>
        <result property="createTime" column="createTime"/>
        <result property="createUserid" column="createUserid"/>
        <result property="isDelete" column="isDelete"/>
        <result property="saleBillId" column="saleBillId"/>
        <result property="realPrice" column="realPrice"/>        
        <result property="cashPay" column="cashPay"/>
        <result property="cashNo" column="cashNo"/>
        <result property="thirdPay" column="thirdPay"/>
        <result property="thirdType" column="thirdType"/>
        <result property="thirdNo" column="thirdNo"/>
        <result property="benefitType" column="benefit_type"/>
        <result property="benefitAmount" column="benefit_amount"/>
        <result property="saleKbn" column="sale_kbn"/>
        <result property="benefitTicket" column="benefit_ticket"/>
        <result property="benefitSelf" column="benefit_self"/>
        <result property="salePrice" column="sale_price"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
		id,saleBillId,subOrderId,subOrderItemId,payTime,takeTime,returnTime,own,productId,productName,skuId,categoryId,
			categoryName,price,number,allPrice,realPrice,commissionRatio,commission,payPrice,status,haveCheap,fuCoin,
			createTime,createUserid,isDelete,carriagePrice,cashPay,cashNo,thirdPay,thirdType,thirdNo,benefit_type,
			benefit_amount,sale_kbn,benefit_ticket,benefit_self,sale_price
	    ]]>
	</sql>
	
	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO t_sale_detail (
        	id , 
        	saleBillId ,
        	subOrderId ,
        	subOrderItemId,
        	payTime ,
        	takeTime ,
        	returnTime ,
        	own ,
        	productId ,
        	productName ,
        	skuId ,
        	categoryId ,
        	categoryName ,
        	price ,
        	carriagePrice ,
        	number ,
        	allPrice ,
        	realPrice,
        	commissionRatio ,
        	commission ,
        	payPrice ,
        	status ,
        	haveCheap ,
        	fuCoin ,
        	createTime ,
        	createUserid ,
        	isDelete ,
        	cashPay ,
        	cashNo ,
        	thirdPay ,
        	thirdType ,
        	thirdNo ,
        	benefit_type ,
        	benefit_amount ,
        	sale_kbn,
        	benefit_ticket,
        	benefit_self,
        	sale_price
        ) VALUES (
        	#{id} ,
        	#{saleBillId},
        	#{subOrderId} ,
        	#{subOrderItemId} ,
        	#{payTime} ,
        	#{takeTime} ,
        	#{returnTime} ,
        	#{own} ,
        	#{productId} ,
        	#{productName} ,
        	#{skuId} ,
        	#{categoryId} ,
        	#{categoryName} ,
        	#{price} ,
        	#{carriagePrice} ,
        	#{number} ,
        	#{allPrice} ,
        	#{realPrice},
        	#{commissionRatio} ,
        	#{commission} ,
        	#{payPrice} ,
        	#{status} ,
        	#{haveCheap} ,
        	#{fuCoin} ,
        	#{createTime} ,
        	#{createUserid} ,
        	#{isDelete} ,
        	#{cashPay} ,
        	#{cashNo} ,
        	#{thirdPay} ,
        	#{thirdType} ,
        	#{thirdNo}  ,
        	#{benefitType}  ,
        	#{benefitAmount}  ,
        	#{saleKbn} ,
        	#{benefitTicket} ,
        	#{benefitSelf} ,
        	#{salePrice}
        )
    ]]>
	</insert>
    
	<update id="update" >
    <![CDATA[
        UPDATE t_sale_detail SET
	        saleBillId = #{saleBillId},
	        subOrderItemId = #{subOrderItemId} ,
	        payTime = #{payTime} ,
	        takeTime = #{takeTime} ,
	        returnTime = #{returnTime} ,
	        own = #{own} ,
	        productId = #{productId} ,
	        productName = #{productName} ,
	        skuId = #{skuId} ,
	        categoryId = #{categoryId} ,
	        categoryName = #{categoryName} ,
	        price = #{price} ,
	        carriagePrice = #{carriagePrice} ,
	        number = #{number} ,
	        allPrice = #{allPrice} ,
	        realPrice = #{realPrice} ,
	        commissionRatio = #{commissionRatio} ,
	        commission = #{commission} ,
	        payPrice = #{payPrice} ,
	        status = #{status} ,
	        haveCheap = #{haveCheap} ,
	        fuCoin = #{fuCoin} ,
	        createTime = #{createTime} ,
	        createUserid = #{createUserid} ,
	        isDelete = #{isDelete} 
        WHERE 
	        id = #{id} 
    ]]>
	</update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM t_sale_detail WHERE
        id = #{id} 
    ]]>
    </delete>
    
    <select id="getById" resultMap="SaleDetail">
		SELECT <include refid="columns" />
	    <![CDATA[
		    FROM t_sale_detail 
	        WHERE 
		        id = #{id} 
	    ]]>
	</select>
		
    <select id="findPage_count" resultType="long">
        SELECT count(*) FROM t_sale_detail 
		<include refid="findPage_where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="SaleDetail">
    	SELECT <include refid="columns" />
	    FROM t_sale_detail 
		<include refid="findPage_where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
	<sql id="findPage_where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND id = #{id}
			</if>
			<if test="@Ognl@isNotEmpty(saleBillId)">
				AND saleBillId = #{saleBillId}
			</if>
	       <if test="@Ognl@isNotEmpty(subOrderId)">
				AND subOrderId = #{subOrderId}
			</if>
	       <if test="@Ognl@isNotEmpty(subOrderItemId)">
				AND subOrderItemId = #{subOrderItemId}
			</if>
	       <if test="@Ognl@isNotEmpty(payTimeBegin)">
				AND payTime >= #{payTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(payTimeEnd)">
				AND payTime &lt;= #{payTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(takeTimeBegin)">
				AND takeTime >= #{takeTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(takeTimeEnd)">
				AND takeTime &lt;= #{takeTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(returnTimeBegin)">
				AND returnTime >= #{returnTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(returnTimeEnd)">
				AND returnTime &lt;= #{returnTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(own)">
				AND own = #{own}
			</if>
	       <if test="@Ognl@isNotEmpty(productId)">
				AND productId = #{productId}
			</if>
	       <if test="@Ognl@isNotEmpty(productName)">
				AND productName = #{productName}
			</if>
	       <if test="@Ognl@isNotEmpty(skuId)">
				AND skuId = #{skuId}
			</if>
	       <if test="@Ognl@isNotEmpty(categoryId)">
				AND categoryId = #{categoryId}
			</if>
	       <if test="@Ognl@isNotEmpty(categoryName)">
				AND categoryName = #{categoryName}
			</if>
	       <if test="@Ognl@isNotEmpty(price)">
				AND price = #{price}
			</if>
	       <if test="@Ognl@isNotEmpty(number)">
				AND number = #{number}
			</if>
	       <if test="@Ognl@isNotEmpty(allPrice)">
				AND allPrice = #{allPrice}
			</if>
	       <if test="@Ognl@isNotEmpty(commissionRatio)">
				AND commissionRatio = #{commissionRatio}
			</if>
	       <if test="@Ognl@isNotEmpty(commission)">
				AND commission = #{commission}
			</if>
	       <if test="@Ognl@isNotEmpty(payPrice)">
				AND payPrice = #{payPrice}
			</if>
	       <if test="@Ognl@isNotEmpty(status)">
				AND status = #{status}
			</if>
	       <if test="@Ognl@isNotEmpty(haveCheap)">
				AND haveCheap = #{haveCheap}
			</if>
	       <if test="@Ognl@isNotEmpty(fuCoin)">
				AND fuCoin = #{fuCoin}
			</if>
	       <if test="@Ognl@isNotEmpty(createTimeBegin)">
				AND createTime >= #{createTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(createTimeEnd)">
				AND createTime &lt;= #{createTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(createUserid)">
				AND createUserid = #{createUserid}
			</if>
	       <if test="@Ognl@isNotEmpty(isDelete)">
				AND isDelete = #{isDelete}
			</if>
		</where>
	</sql>
	
	
	<!-- 查询订单  员工亲友购买商品等同于该员工购买-->
    <select id="countByOrder" resultMap="SaleDetail">
		SELECT * FROM (	
		SELECT 
			null id,
			SOI.subOrderId,
			SOI.subOrderItemId,
			SO.payTime,
			SO.takeTime,
			null returnTime,
			CASE WHEN U.supplierId = #{enterpriseId} THEN 0 ELSE 1 END own,
			SOI.productId, 
			SOI.productName,
			SOI.skuId,
			SOI.categoryId,
			SOI.categoryName,
			SOI.price, 
			SOI.shipping carriagePrice,
			SOI.number,
			SOI.price * SOI.number allPrice,
			SOI.real_pay realPrice, 
			SOI.commissionRatio,
			null commission, 
			0 payPrice,
			1 status,
			0 haveCheap,
			SOI.companyTicket fuCoin,
			null createTime,
			null createUserid,
			0 isDelete,
			null saleBillId
			,SO.cashPay cashPay,SO.cashNo cashNo
			,SO.thirdPay thirdPay,SO.thirdType thirdType,SO.thirdNo thirdNo
			,CASE WHEN SOI.sale_kbn=5 THEN 5 ELSE SOI.benefit_type END benefit_type
			,CASE WHEN SOI.sale_kbn=5 THEN SOI.emp_price*SOI.number ELSE SOI.benefit_amount END benefit_amount
			,SOI.sale_kbn
			,SOI.benefit_ticket
			,SOI.benefit_self
			,SOI.internal_purchase_price sale_price
		FROM t_suborderitem AS SOI
		INNER JOIN t_suborder As SO
		ON (SOI.order_id = SO.orderId AND
				SOI.subOrderId = SO.subOrderId)
		INNER JOIN t_orders AS O
		ON (O.orderId = SO.orderId)
		INNER JOIN t_user AS U
		ON (U.id = O.userId)
		INNER JOIN t_supplier_close_cmd AS SCC
		ON (SO.takeTime BETWEEN SCC.close_start and SCC.close_end)
		WHERE SCC.id = #{id}
		  AND SO.supplierId = #{supplierId}
		UNION ALL
		SELECT 
			null id,
			SOI.subOrderId,
			SOI.subOrderItemId,
			SO.payTime,
			SO.takeTime,
			RO.updateTime returnTime,
			CASE WHEN U.supplierId = #{enterpriseId} THEN 0 ELSE 1 END own,
			SOI.productId, 
			SOI.productName,
			SOI.skuId,
			SOI.categoryId,
			SOI.categoryName,
			SOI.price, 
			0 carriagePrice,
			SOI.number,
			SOI.price * SOI.number allPrice,
			SOI.real_pay realPrice, 
			SOI.commissionRatio,
			null commission, 
			RO.refundPrice payPrice,
			-1 status,
			0 haveCheap,
			SOI.companyTicket fuCoin,
			null createTime,
			null createUserid,
			0 isDelete,
			null saleBillId
			,SO.cashPay cashPay,SO.cashNo cashNo
			,SO.thirdPay thirdPay,SO.thirdType thirdType,SO.thirdNo thirdNo
			,CASE WHEN SOI.sale_kbn=5 THEN 5 ELSE SOI.benefit_type END benefit_type
			,CASE WHEN SOI.sale_kbn=5 THEN SOI.emp_price*SOI.number ELSE SOI.benefit_amount END benefit_amount
			,SOI.sale_kbn
			,SOI.benefit_ticket
			,SOI.benefit_self
			,SOI.internal_purchase_price sale_price
		FROM t_suborderitem AS SOI
		INNER JOIN t_suborder As SO
		ON (SOI.order_id = SO.orderId AND
				SOI.subOrderId = SO.subOrderId)
		INNER JOIN t_orders AS O
		ON (O.orderId = SO.orderId)
		INNER JOIN t_user AS U
		ON (U.id = O.userId)
		INNER JOIN t_refundorder AS RO
		ON (RO.refundOrderId = SO.refundOrderId)
		INNER JOIN t_supplier_close_cmd AS SCC
		ON (RO.updateTime BETWEEN SCC.close_start and SCC.close_end)
		WHERE SCC.id = #{id}
		  AND SO.supplierId = #{supplierId}
          AND SO.close_flg = 0
		  AND SO.takeTime IS NOT NULL
	      AND RO.`status` = 10) AS A
		ORDER BY A.takeTime,returnTime
    </select>
    
    
	<!-- 查询订单  员工亲友购买商品等同于该员工购买-->
    <select id="countByOrderEx" resultMap="SaleDetail">
		SELECT * FROM (	
		SELECT 
			null id,
			SOI.subOrderId,
			SOI.subOrderItemId,
			SO.payTime,
			SO.takeTime,
			null returnTime,
			CASE WHEN U.supplierId = #{enterpriseId} THEN 0 ELSE 1 END own,
			SOI.productId, 
			SOI.productName,
			SOI.skuId,
			SOI.categoryId,
			SOI.categoryName,
			SOI.price, 
			SOI.shipping carriagePrice,
			SOI.number,
			SOI.price * SOI.number allPrice,
			SOI.real_pay realPrice, 
			SOI.commissionRatio,
			null commission, 
			0 payPrice,
			1 status,
			0 haveCheap,
			SOI.companyTicket fuCoin,
			null createTime,
			null createUserid,
			0 isDelete,
			null saleBillId
			,SO.cashPay cashPay,SO.cashNo cashNo
			,SO.thirdPay thirdPay,SO.thirdType thirdType,SO.thirdNo thirdNo
			,CASE WHEN SOI.sale_kbn=5 THEN 5 ELSE SOI.benefit_type END benefit_type
			,CASE WHEN SOI.sale_kbn=5 THEN SOI.emp_price*SOI.number ELSE SOI.benefit_amount END benefit_amount
			,SOI.sale_kbn
			,SOI.benefit_ticket
			,SOI.benefit_self
			,SOI.internal_purchase_price sale_price
		FROM t_suborderitem AS SOI
		INNER JOIN t_suborder As SO
		ON (SOI.order_id = SO.orderId AND
				SOI.subOrderId = SO.subOrderId)
		INNER JOIN t_orders AS O
		ON (O.orderId = SO.orderId)
		INNER JOIN t_user AS U
		ON (U.id = O.userId)
		INNER JOIN t_supplier_close_cmd AS SCC
		ON (SO.payTime BETWEEN SCC.close_start and SCC.close_end)
    	WHERE SCC.id = #{id}
		  AND SO.supplierId = #{supplierId}
		  AND SO.status >= 1
          AND SO.close_flg = 0
		UNION ALL
		SELECT 
			null id,
			SOI.subOrderId,
			SOI.subOrderItemId,
			SO.payTime,
			SO.takeTime,
			RO.updateTime returnTime,
			CASE WHEN U.supplierId = #{enterpriseId} THEN 0 ELSE 1 END own,
			SOI.productId, 
			SOI.productName,
			SOI.skuId,
			SOI.categoryId,
			SOI.categoryName,
			SOI.price, 
			0 carriagePrice,
			SOI.number,
			SOI.price * SOI.number allPrice,
			SOI.real_pay realPrice, 
			SOI.commissionRatio,
			null commission, 
			RO.refundPrice payPrice,
			-1 status,
			0 haveCheap,
			SOI.companyTicket fuCoin,
			null createTime,
			null createUserid,
			0 isDelete,
			null saleBillId
			,SO.cashPay cashPay,SO.cashNo cashNo
			,SO.thirdPay thirdPay,SO.thirdType thirdType,SO.thirdNo thirdNo
			,CASE WHEN SOI.sale_kbn=5 THEN 5 ELSE SOI.benefit_type END benefit_type
			,CASE WHEN SOI.sale_kbn=5 THEN SOI.emp_price*SOI.number ELSE SOI.benefit_amount END benefit_amount
			,SOI.sale_kbn
			,SOI.benefit_ticket
			,SOI.benefit_self
			,SOI.internal_purchase_price sale_price
		FROM t_suborderitem AS SOI
		INNER JOIN t_suborder As SO
		ON (SOI.order_id = SO.orderId AND
				SOI.subOrderId = SO.subOrderId)
		INNER JOIN t_orders AS O
		ON (O.orderId = SO.orderId)
		INNER JOIN t_user AS U
		ON (U.id = O.userId)
		INNER JOIN t_refundorder AS RO
		ON (RO.refundOrderId = SO.refundOrderId)
		INNER JOIN t_supplier_close_cmd AS SCC
		ON (RO.updateTime BETWEEN SCC.close_start and SCC.close_end)
		WHERE SCC.id = #{id}
		  AND SO.supplierId = #{supplierId}
	      AND SO.takeTime IS NOT NULL
		  AND RO.`status` = 10) AS A
		ORDER BY A.takeTime,returnTime
    </select>
    
	<!-- 换领商品快速接结算-->
    <select id="countExchangeOrder" resultMap="SaleDetail">
		SELECT * FROM (	
		SELECT 
			SO.supplierId id,
			SOI.subOrderId,
			SOI.subOrderItemId,
			SO.payTime,
			SO.takeTime,
			null returnTime,
			1 own,
			SOI.productId, 
			SOI.productName,
			SOI.skuId,
			SOI.categoryId,
			SOI.categoryName,
			SOI.price, 
			SOI.shipping carriagePrice,
			SOI.number,
			SOI.price * SOI.number allPrice,
			SOI.real_pay realPrice, 
			SOI.commissionRatio,
			null commission, 
			0 payPrice,
			1 status,
			0 haveCheap,
			SOI.companyTicket fuCoin,
			null createTime,
			null createUserid,
			0 isDelete,
			null saleBillId
			,SO.cashPay cashPay,SO.cashNo cashNo
			,SO.thirdPay thirdPay,SO.thirdType thirdType,SO.thirdNo thirdNo
			,CASE WHEN SOI.sale_kbn=5 THEN 5 ELSE SOI.benefit_type END benefit_type
			,CASE WHEN SOI.sale_kbn=5 THEN SOI.emp_price*SOI.number ELSE SOI.benefit_amount END benefit_amount
			,SOI.sale_kbn
			,SOI.benefit_ticket
			,SOI.benefit_self
			,SOI.internal_purchase_price sale_price
		FROM t_suborderitem AS SOI
		INNER JOIN t_suborder As SO
		        ON (SOI.order_id = SO.orderId AND SOI.subOrderId = SO.subOrderId)
	  	INNER JOIN t_supplier_duration sd 
				ON (sd.supplierId = SO.supplierId)
		WHERE SOI.sale_kbn=2 
          AND (SO.takeTime BETWEEN #{closeStart} and #{closeEnd})
	      AND sd.saleDurationKey in ('101','102','103','104','105','106','107')
	    UNION ALL
		SELECT 
			SO.supplierId id,
			SOI.subOrderId,
			SOI.subOrderItemId,
			SO.payTime,
			SO.takeTime,
			RO.updateTime returnTime,
			1 own,
			SOI.productId, 
			SOI.productName,
			SOI.skuId,
			SOI.categoryId,
			SOI.categoryName,
			SOI.price, 
			0 carriagePrice,
			SOI.number,
			SOI.price * SOI.number allPrice,
			SOI.real_pay realPrice, 
			SOI.commissionRatio,
			null commission, 
			RO.refundPrice payPrice,
			-1 status,
			0 haveCheap,
			SOI.companyTicket fuCoin,
			null createTime,
			null createUserid,
			0 isDelete,
			null saleBillId
			,SO.cashPay cashPay,SO.cashNo cashNo
			,SO.thirdPay thirdPay,SO.thirdType thirdType,SO.thirdNo thirdNo
			,CASE WHEN SOI.sale_kbn=5 THEN 5 ELSE SOI.benefit_type END benefit_type
			,CASE WHEN SOI.sale_kbn=5 THEN SOI.emp_price*SOI.number ELSE SOI.benefit_amount END benefit_amount
			,SOI.sale_kbn
			,SOI.benefit_ticket
			,SOI.benefit_self
			,SOI.internal_purchase_price sale_price
		FROM t_suborderitem AS SOI
		INNER JOIN t_suborder As SO
		        ON (SOI.order_id = SO.orderId AND SOI.subOrderId = SO.subOrderId)
		INNER JOIN t_refundorder AS RO
			    ON (RO.refundOrderId = SO.refundOrderId)
		INNER JOIN t_supplier_duration sd 
				ON (sd.supplierId = SO.supplierId)
		WHERE SOI.sale_kbn=2 
        AND (RO.updateTime BETWEEN #{closeStart} and #{closeEnd})
	    AND sd.saleDurationKey in ('101','102','103','104','105','106','107')
			AND SO.takeTime IS NOT NULL
	    AND RO.`status` = 10) AS A
		ORDER BY A.takeTime,returnTime
    </select>
    
    <!-- 根据对账单id查询所有订单详情 -->
    <select id="getBySaleBillId" resultMap="SaleDetail">
		SELECT <include refid="columns" />
	    <![CDATA[
		    FROM t_sale_detail 
	        WHERE 
		        saleBillId = #{saleBillId} 
	    ]]>
		ORDER BY subOrderId
	</select>
</mapper>

