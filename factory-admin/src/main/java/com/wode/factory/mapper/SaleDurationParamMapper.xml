<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="com.wode.factory.mapper.SaleDurationParamDao">

	<resultMap id="SaleDurationParam" type="com.wode.factory.model.SaleDurationParam">
        <result property="id" column="id"/>
        <result property="key" column="key"/>
        <result property="caption" column="caption"/>
        <result property="dispOrder" column="disp_order"/>
        <result property="value" column="value"/>
        <result property="descr" column="descr"/>
        <result property="stopFlg" column="stop_flg"/>
        <result property="updateTime" column="update_time"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
		id,key,caption,disp_order,value,descr,stop_flg,update_time
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO m_sale_duration_param (
        	id ,
        	key ,
        	caption ,
        	disp_order ,
        	value ,
        	descr ,
        	stop_flg ,
        	update_time 
        ) VALUES (
        	#{id} ,
        	#{key} ,
        	#{caption} ,
        	#{dispOrder} ,
        	#{value} ,
        	#{descr} ,
        	#{stopFlg} ,
        	#{updateTime} 
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="update" >
    <![CDATA[
        UPDATE m_sale_duration_param SET
	        key = #{key} ,
	        caption = #{caption} ,
	        disp_order = #{dispOrder} ,
	        value = #{value} ,
	        descr = #{descr} ,
	        stop_flg = #{stopFlg} ,
	        update_time = #{updateTime} 
        WHERE 
	        id = #{id} 
    ]]>
	</update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM m_sale_duration_param WHERE
        id = #{id} 
    ]]>
    </delete>
    
    <select id="findAll" resultMap="SaleDurationParam">
   		SELECT *
		    FROM m_sale_duration_param WHERE stop_flg=0 ORDER BY disp_order ASC
    </select>
    
    <select id="getById" resultMap="SaleDurationParam">
		SELECT <include refid="columns" />
	    <![CDATA[
		    FROM m_sale_duration_param 
	        WHERE 
		        id = #{id} 
	    ]]>
	</select>
		
    <select id="findPage_count" resultType="long">
        SELECT count(*) FROM m_sale_duration_param 
		<include refid="findPage_where"/>    
    </select>
    <!-- 通过key查询规则表中的value -->
    <select id="selectByKey" resultMap="SaleDurationParam">
	    <![CDATA[
		    SELECT
                  m_sale_duration_param.id,
                  m_sale_duration_param.`key`,
                  m_sale_duration_param.caption,
                  m_sale_duration_param.disp_order,
                  m_sale_duration_param.`value`,
                  m_sale_duration_param.descr,
                  m_sale_duration_param.stop_flg,
                  m_sale_duration_param.update_time
            FROM
                  m_sale_duration_param
            WHERE
                  m_sale_duration_param.`key` =  #{key} 
	    ]]>
    </select>
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="SaleDurationParam">
    	SELECT <include refid="columns" />
	    FROM m_sale_duration_param 
		<include refid="findPage_where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
	<sql id="findPage_where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND id = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(key)">
				AND key = #{key}
			</if>
	       <if test="@Ognl@isNotEmpty(caption)">
				AND caption = #{caption}
			</if>
	       <if test="@Ognl@isNotEmpty(dispOrder)">
				AND disp_order = #{dispOrder}
			</if>
	       <if test="@Ognl@isNotEmpty(value)">
				AND value = #{value}
			</if>
	       <if test="@Ognl@isNotEmpty(descr)">
				AND descr = #{descr}
			</if>
	       <if test="@Ognl@isNotEmpty(stopFlg)">
				AND stop_flg = #{stopFlg}
			</if>
	       <if test="@Ognl@isNotEmpty(updateTimeBegin)">
				AND update_time >= #{updateTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(updateTimeEnd)">
				AND update_time &lt;= #{updateTimeEnd}
		   </if>
		</where>
	</sql>
	
</mapper>

