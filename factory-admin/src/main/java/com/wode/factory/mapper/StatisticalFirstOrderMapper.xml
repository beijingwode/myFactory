<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="com.wode.factory.mapper.StatisticalFirstOrderDao">

    <resultMap id="StatisticalFirstOrder" type="com.wode.factory.model.StatisticalFirstOrder">
        <result property="id" column="id"/>
        <result property="month" column="month"/>
        <result property="createTime" column="create_time"/>
        <result property="empId" column="emp_id"/>
        <result property="enterpriseId" column="enterprise_id"/>
        <result property="enterpriseName" column="enterprise_name"/>
        <result property="enterpriseManager" column="enterprise_manager"/>
        <result property="payTime" column="pay_time"/>
        <result property="takeTime" column="take_time"/>
        <result property="shipping" column="shipping"/>
        <result property="adjustment" column="adjustment"/>
        <result property="realPrice" column="realPrice"/>
        <result property="companyTicket" column="companyTicket"/>
        <result property="benefitType" column="benefit_type"/>
        <result property="benefitAmount" column="benefit_amount"/>
        <result property="supplierId" column="supplier_id"/>
        <result property="supplierName" column="supplier_name"/>
        <result property="supplierManager" column="supplier_manager"/>
        <result property="subOrderId" column="subOrderId"/>
    </resultMap>

    <!-- 用于select查询公用抽取的列 -->
    <sql id="columns">
        <![CDATA[
        id,month,create_time,emp_id,enterprise_id,enterprise_name,enterprise_manager,pay_time,take_time,shipping,adjustment,realPrice,companyTicket,benefit_type,benefit_amount,supplier_id,supplier_name,supplier_manager,subOrderId
        ]]>
    </sql>

    <!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO t_statistical_first_order (
            month ,
            create_time ,
            emp_id ,
            enterprise_id ,
            enterprise_name ,
            enterprise_manager ,
            pay_time ,
            take_time ,
            shipping ,
            adjustment ,
            realPrice ,
            companyTicket ,
            benefit_type ,
            benefit_amount ,
            supplier_id ,
            supplier_name ,
            supplier_manager ,
            subOrderId
        ) VALUES (
            #{month} ,
            #{createTime} ,
            #{empId} ,
            #{enterpriseId} ,
            #{enterpriseName} ,
            #{enterpriseManager} ,
            #{payTime} ,
            #{takeTime} ,
            #{shipping} ,
            #{adjustment} ,
            #{realPrice} ,
            #{companyTicket} ,
            #{benefitType} ,
            #{benefitAmount} ,
            #{supplierId} ,
            #{supplierName} ,
            #{supplierManager} ,
            #{subOrderId}
        )
    ]]>
    </insert>

    <update id="update" >
    <![CDATA[
        UPDATE t_statistical_first_order SET            
            month = #{month} ,
            create_time = #{createTime} ,
            emp_id = #{empId} ,
            enterprise_id = #{enterpriseId} ,
            enterprise_name = #{enterpriseName} ,
            enterprise_manager = #{enterpriseManager} ,
            pay_time = #{payTime} ,
            take_time = #{takeTime} ,
            shipping = #{shipping} ,
            adjustment = #{adjustment} ,
            realPrice = #{realPrice} ,
            companyTicket = #{companyTicket} ,
            benefit_type = #{benefitType} ,
            benefit_amount = #{benefitAmount} ,
            supplier_id = #{supplierId} ,
            supplier_name = #{supplierName} ,
            supplier_manager = #{supplierManager} ,
            subOrderId = #{subOrderId} 
        WHERE 
            id = #{id} 
    ]]>
    </update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM t_statistical_first_order WHERE
        id = #{id} 
    ]]>
    </delete>
    <select id="getById" resultMap="StatisticalFirstOrder">
        SELECT <include refid="columns" />
        <![CDATA[
            FROM t_statistical_first_order 
            WHERE 
                id = #{id} 
        ]]>
    </select>

    <select id="selectByModel" resultMap="StatisticalFirstOrder">
        SELECT <include refid="columns" /> FROM t_statistical_first_order 
        <include refid="find_where"/>
    </select>

    <select id="countSupplierByModel" resultMap="StatisticalFirstOrder">
    	SELECT month,supplier_id,supplier_name,supplier_manager,count(1) emp_id,sum(realPrice) realPrice,sum(shipping) shipping
    	FROM t_statistical_first_order 
        <include refid="find_where"/>
    	GROUP BY month,supplier_id,supplier_manager
    </select>
    <select id="countSupplierEmpty" resultMap="StatisticalFirstOrder">
    	SELECT s.id supplier_id,s.com_name supplier_name,s.manager_id supplier_manager, c.month,c.emp_id,c.realPrice,c.shipping
    	FROM t_supplier s 
    	LEFT JOIN (
    	SELECT month,supplier_id,count(1) emp_id,sum(realPrice) realPrice,sum(shipping) shipping
    	FROM t_statistical_first_order 
        <include refid="find_where"/>
    	GROUP BY month,supplier_id,supplier_manager) c ON (c.supplier_id=s.id)
    	<where>
           <if test="@Ognl@isNotEmpty(supplierManager)">
                AND s.manager_id = #{supplierManager}
            </if>
           <if test="@Ognl@isNotEmpty(supplierId)">
                AND s.id = #{supplierId}
            </if>
        </where>
    </select>
    
    <select id="countEnterpriseByModel" resultMap="StatisticalFirstOrder">
    	SELECT month,enterprise_id,enterprise_name,enterprise_manager,count(1) emp_id,sum(realPrice) realPrice,sum(shipping) shipping
    	FROM t_statistical_first_order 
        <include refid="find_where"/>
    	GROUP BY month,enterprise_id,enterprise_manager
    </select>
    
    <select id="countEnterpriseEmpty" resultMap="StatisticalFirstOrder">
    	SELECT s.id enterprise_id,s.com_name enterprise_name,s.manager_id enterprise_manager, c.month,c.emp_id,c.realPrice,c.shipping
    	FROM t_supplier s 
    	LEFT JOIN (
    	SELECT month,enterprise_id,count(1) emp_id,sum(realPrice) realPrice,sum(shipping) shipping
    	FROM t_statistical_first_order 
        <include refid="find_where"/>
    	GROUP BY month,enterprise_id,enterprise_manager) c ON (c.enterprise_id=s.id)
    	<where>
           <if test="@Ognl@isNotEmpty(enterpriseManager)">
                AND s.manager_id = #{enterpriseManager}
            </if>
           <if test="@Ognl@isNotEmpty(enterpriseId)">
                AND s.id = #{enterpriseId}
            </if>
        </where>
    	
    </select>
    
    
    <sql id="find_where">
        <!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
        <where>
           <if test="@Ognl@isNotEmpty(id)">
                AND id = #{id}
            </if>
           <if test="@Ognl@isNotEmpty(month)">
				AND month like CONCAT(#{month},'%')
            </if>
           <if test="@Ognl@isNotEmpty(createTime)">
                AND create_time = #{createTime}
            </if>
           <if test="@Ognl@isNotEmpty(empId)">
                AND emp_id = #{empId}
            </if>
           <if test="@Ognl@isNotEmpty(enterpriseId)">
                AND enterprise_id = #{enterpriseId}
            </if>
           <if test="@Ognl@isNotEmpty(enterpriseName)">
                AND enterprise_name = #{enterpriseName}
            </if>
           <if test="@Ognl@isNotEmpty(enterpriseManager)">
                AND enterprise_manager = #{enterpriseManager}
            </if>
           <if test="@Ognl@isNotEmpty(payTime)">
                AND pay_time = #{payTime}
            </if>
           <if test="@Ognl@isNotEmpty(takeTime)">
                AND take_time = #{takeTime}
            </if>
           <if test="@Ognl@isNotEmpty(shipping)">
                AND shipping = #{shipping}
            </if>
           <if test="@Ognl@isNotEmpty(adjustment)">
                AND adjustment = #{adjustment}
            </if>
           <if test="@Ognl@isNotEmpty(realPrice)">
                AND realPrice = #{realPrice}
            </if>
           <if test="@Ognl@isNotEmpty(companyTicket)">
                AND companyTicket = #{companyTicket}
            </if>
           <if test="@Ognl@isNotEmpty(benefitType)">
                AND benefit_type = #{benefitType}
            </if>
           <if test="@Ognl@isNotEmpty(benefitAmount)">
                AND benefit_amount = #{benefitAmount}
            </if>
           <if test="@Ognl@isNotEmpty(supplierId)">
                AND supplier_id = #{supplierId}
            </if>
           <if test="@Ognl@isNotEmpty(supplierName)">
                AND supplier_name = #{supplierName}
            </if>
           <if test="@Ognl@isNotEmpty(supplierManager)">
                AND supplier_manager = #{supplierManager}
            </if>
           <if test="@Ognl@isNotEmpty(subOrderId)">
                AND subOrderId = #{subOrderId}
            </if>
        </where>
    </sql>
    
	<select id="countByTakeDate" resultMap="StatisticalFirstOrder">
        SELECT firstOrder.emp_id,u.supplierId enterprise_id,so.payTime,so.takeTime,so.totalShipping shipping,so.totalAdjustment adjustment,so.realPrice realPrice,so.companyTicket,so.benefit_type,so.benefit_amount,so.supplierId supplier_id,so.subOrderId
		FROM (
		SELECT o.userId emp_id,MIN(so.takeTime) first_take
		FROM t_suborder so 
		INNER JOIN t_orders o ON (o.orderId = so.orderId)
		WHERE DATE_FORMAT(so.takeTime,'%Y-%m')=#{countDate}
		AND NOT EXISTS (select 1 from t_statistical_first_order fo WHERE fo.emp_id = o.userId)
		GROUP BY o.userId
		) firstOrder 
		INNER JOIN t_orders o ON (o.userId=firstOrder.emp_id)
		INNER JOIN t_suborder so ON (so.orderId=o.orderId AND so.takeTime = firstOrder.first_take)
		INNER JOIN t_user u ON (u.id = firstOrder.emp_id)
    </select>
</mapper>
