<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->

<mapper namespace="com.wode.factory.mapper.CommissionRefundDetailDao">
	<resultMap id="CommissionRefundDetail" type="com.wode.factory.model.CommissionRefundDetail">
        <result property="id" column="id"/>
        <result property="commissionRefundId" column="commissionRefundId"/>
        <result property="userId" column="user_id"/>
        <result property="orderId" column="order_id"/>
        <result property="paymentAmount" column="payment_amount"/>
        <result property="freight" column="freight"/>
        <result property="fuli" column="fuli"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
        <result property="commissionTotal" column="commissionTotal"/>        
	</resultMap>
	
	<resultMap id="SupplierSaleFuliVo" type="com.wode.factory.vo.SupplierSaleFuliVo">
        <result property="supplierId" column="supplierId"/>
        <result property="fuli" column="fuli"/> 
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
		id,commissionRefundId,user_id,order_id,payment_amount,freight,fuli,create_time,update_time,commissionTotal
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO t_commission_refund_detail (
        	id ,
        	commissionRefundId,
        	user_id ,
        	order_id ,
        	payment_amount ,
        	freight ,
        	fuli ,
        	create_time ,
        	update_time ,
        	commissionTotal
        ) VALUES (
        	#{id} ,
        	#{commissionRefundId},
        	#{userId} ,
        	#{orderId} ,
        	#{paymentAmount} ,
        	#{freight} ,
        	#{fuli} ,
        	#{createTime} ,
        	#{updateTime} ,
        	#{commissionTotal}
        	
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="update" >
    <![CDATA[
        UPDATE t_commission_refund_detail SET
        	commissionRefundId = #{commissionRefundId},
        	commissionTotal = #{commissionTotal},
	        user_id = #{userId} ,
	        order_id = #{orderId} ,
	        payment_amount = #{paymentAmount} ,
	        freight = #{freight} ,
	        fuli = #{fuli} ,
	        create_time = #{createTime} ,
	        update_time = #{updateTime} 
        WHERE 
	        id = #{id} 
    ]]>
	</update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM t_commission_refund_detail WHERE
        id = #{id} 
    ]]>
    </delete>
    
    <select id="getById" resultMap="CommissionRefundDetail">
		SELECT <include refid="columns" />
	    <![CDATA[
		    FROM t_commission_refund_detail 
	        WHERE 
		        id = #{id} 
	    ]]>
	</select>
	
    <select id="getByRefundId" resultMap="CommissionRefundDetail">
		SELECT <include refid="columns" />
	    <![CDATA[
		    FROM t_commission_refund_detail 
	        WHERE 
		        commissionRefundId = #{commissionRefundId} 
	    ]]>
	</select>
		
    <select id="findPage_count" resultType="long">
        SELECT count(*) FROM t_commission_refund_detail 
		<include refid="findPage_where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="CommissionRefundDetail">
    	SELECT <include refid="columns" />
	    FROM t_commission_refund_detail 
		<include refid="findPage_where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
	<sql id="findPage_where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND id = #{id}
			</if>
			<if test="@Ognl@isNotEmpty(commissionRefundId)">
				AND commissionRefundId = #{commissionRefundId}
			</if>
	       <if test="@Ognl@isNotEmpty(userId)">
				AND user_id = #{userId}
			</if>
	       <if test="@Ognl@isNotEmpty(orderId)">
				AND order_id = #{orderId}
			</if>
	       <if test="@Ognl@isNotEmpty(paymentAmount)">
				AND payment_amount = #{paymentAmount}
			</if>
	       <if test="@Ognl@isNotEmpty(freight)">
				AND freight = #{freight}
			</if>
	       <if test="@Ognl@isNotEmpty(fuli)">
				AND fuli = #{fuli}
			</if>
	       <if test="@Ognl@isNotEmpty(createTimeBegin)">
				AND create_time >= #{createTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(createTimeEnd)">
				AND create_time &lt;= #{createTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(updateTimeBegin)">
				AND update_time >= #{updateTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(updateTimeEnd)">
				AND update_time &lt;= #{updateTimeEnd}
		   </if>
		</where>
	</sql>
	
	<!-- 查询订单 佣金点位为2%及以下的，商家不享受佣金返还-->
    <select id="countByOrder" resultMap="CommissionRefundDetail">
		SELECT T.user_id,T.order_id,SUM(T.status * T.realPrice) payment_amount,SUM(T.status * T.totalShipping) freight,SUM(T.status * T.fuli) fuli,null create_time, null update_time, null commissionRefundId,SUM(T.commissionTotal) commissionTotal
		FROM (
			SELECT 
				1 status,
				O.userId user_id,
				SO.orderId order_id,
				SO.realPrice,
				SO.totalShipping,
				SO.companyTicket fuli,
				(SELECT SUM(CASE WHEN t.commissionRatio &lt;= 2 THEN 0 ELSE ROUND(t.real_pay * t.commissionRatio) /100 END) FROM t_suborderitem AS t WHERE t.subOrderId = SO.subOrderId AND t.order_id=SO.orderId) commissionTotal 
			FROM t_suborder As SO
			INNER JOIN t_orders AS O
			ON (O.orderId = SO.orderId)
			INNER JOIN t_user AS U
			ON (U.id = O.userId)
			INNER JOIN t_supplier_close_cmd AS SCC
			ON (SO.takeTime BETWEEN SCC.close_start and SCC.close_end)
			WHERE SCC.id = #{id}
			  	AND SO.supplierId &lt;> #{supplierId} 
				AND U.supplierId = #{enterpriseId}
			UNION ALL
			SELECT 
				-1 status,
				O.userId user_id,
				SO.orderId order_id,
				SO.realPrice,
				SO.totalShipping,
				SO.companyTicket fuli,
				(SELECT SUM(CASE WHEN t.commissionRatio &lt;=2 THEN 0 ELSE ROUND(t.real_pay * t.commissionRatio) /100 END) FROM t_suborderitem AS t WHERE t.subOrderId = SO.subOrderId AND t.order_id=SO.orderId) commissionTotal 
			FROM t_suborder As SO
			INNER JOIN t_orders AS O
			ON (O.orderId = SO.orderId)
			INNER JOIN t_user AS U
			ON (U.id = O.userId)
			INNER JOIN t_returnorder AS RO
			ON (RO.subOrderId = SO.subOrderId)
			INNER JOIN t_supplier_close_cmd AS SCC
			ON (RO.updateTime BETWEEN SCC.close_start and SCC.close_end)
			WHERE SCC.id = #{id}
			  	AND SO.supplierId &lt;> #{supplierId} 
				AND U.supplierId = #{enterpriseId}
				AND RO.`status` = 1) AS T
		GROUP BY user_id,order_id
		ORDER BY order_id

    </select>
        
	<!-- 查询订单 佣金点位为2%及以下的，商家不享受佣金返还-->
    <select id="countSupplierDaySaleFuli" resultMap="SupplierSaleFuliVo">
		SELECT 
			SO.supplierId,
			sum(SO.companyTicket) fuli
		FROM t_suborder As SO
		WHERE SO.takeTime BETWEEN #{startTime} and #{endTime}
           GROUP BY SO.supplierId
           HAVING fuli>0
    </select>
</mapper>

