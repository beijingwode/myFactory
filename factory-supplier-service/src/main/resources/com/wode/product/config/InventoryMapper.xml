<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="InventoryMapper">

	<resultMap id="Inventory" type="com.wode.factory.model.Inventory">
        <result property="id" column="id"/>
        <result property="productSpecificationsId" column="productSpecificationsId"/>
        <result property="quantity" column="quantity"/>
        <result property="lockQuantity" column="lockQuantity"/>
         <result property="warnQuantity" column="warnQuantity"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
		id,productSpecificationsId,quantity,lockQuantity,warnQuantity
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO t_inventory (
        	id ,
        	productSpecificationsId ,
        	quantity ,
        	lockQuantity ,
        	warnQuantity
        ) VALUES (
        	#{id} ,
        	#{productSpecificationsId} ,
        	#{quantity} ,
        	#{lockQuantity} ,
        	#{warnQuantity}
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="update" >
    <![CDATA[
        UPDATE t_inventory SET
	        productSpecificationsId = #{productSpecificationsId} ,
	        quantity = #{quantity} ,
	        lockQuantity = #{lockQuantity} ,
	        warnQuantity = #{warnQuantity}
        WHERE 
	        id = #{id} 
    ]]>
	</update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM t_inventory WHERE
        id = #{id} 
    ]]>
    </delete>
    
    <delete id="deleteApprRelation">
    <![CDATA[
        DELETE FROM t_inventory WHERE
        productSpecificationsId IN (select id from t_product_specifications where product_id=#{productId}) 
    ]]>
    </delete>
    
    <select id="getById" resultMap="Inventory">
		SELECT <include refid="columns" />
	    <![CDATA[
		    FROM t_inventory 
	        WHERE 
		        id = #{id} 
	    ]]>
	</select>
	
	<select id="getByProductId" resultMap="Inventory">
		SELECT <include refid="columns" />
	    <![CDATA[
		    FROM t_inventory 
	        WHERE 
		        productSpecificationsId = #{id} 
	    ]]>
	</select>
		
    <select id="findPage_count" resultType="long">
        SELECT count(*) FROM t_inventory 
		<include refid="findPage_where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="Inventory">
    	SELECT <include refid="columns" />
	    FROM t_inventory 
		<include refid="findPage_where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
	<sql id="findPage_where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND id = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(productSpecificationsId)">
				AND productSpecificationsId = #{productSpecificationsId}
			</if>
	       <if test="@Ognl@isNotEmpty(quantity)">
				AND quantity = #{quantity}
			</if>
	       <if test="@Ognl@isNotEmpty(lockQuantity)">
				AND lockQuantity = #{lockQuantity}
			</if>
		</where>
	</sql>
	
	    <select id="findAllBymap" resultMap="Inventory">
	    	SELECT <include refid="columns" />
		    FROM t_inventory 
			<include refid="findPage_where"/>
			
			<if test="@Ognl@isNotEmpty(sortColumns)">
				ORDER BY ${sortColumns}
			</if>
		</select>
	
	    <select id="findByProduct" resultMap="Inventory">
	    	SELECT <include refid="columns" />
		    FROM t_inventory WHERE productSpecificationsId IN (SELECT id from t_product_specifications where isDelete=0 AND product_id=#{productId})
		</select>
			
		<select id="findBySpecId" resultMap="Inventory" parameterType="long">
		SELECT <include refid="columns" />
	    <![CDATA[
		    FROM t_inventory 
	        WHERE 
		        productSpecificationsId = #{skuId} 
	    ]]>
	</select>
</mapper>

