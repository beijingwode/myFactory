<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="UserMapper">

    <resultMap id="User" type="com.wode.factory.model.UserFactory">
        <result property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="email" column="email"/>
        <result property="phone" column="phone"/>
        <result property="type" column="type"/>
        <result property="address" column="address"/>
        <result property="loginTime" column="login_time"/>
        <result property="creatTime" column="creat_time"/>
        <result property="status" column="status"/>
        <result property="avatar" column="avatar"/>
        <result property="birthday" column="birthday"/>
        <result property="nickName" column="nick_name"/>
        <result property="realName" column="real_name"/>
        <result property="usable" column="usable"/>
        <result property="userSignature" column="user_signature"/>
        <result property="userLevel" column="user_level"/>
        <result property="enabled" column="enabled"/>
        <result property="role" column="role"/>
        <result property="supplierId" column="supplierId"/>
        <result property="employeeType" column="employee_type"/>
        <result property="shopLink" column="shop_link"/>
    </resultMap>

    <resultMap id="Role" type="com.wode.factory.model.Role">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="description" column="description"/>
        <result property="supplierId" column="supplier_id"/>
    </resultMap>
    
    <resultMap id="Resource" type="com.wode.factory.model.Resource">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="description" column="description"/>
    </resultMap>

    <resultMap id="RoleWithResources" type="com.wode.factory.model.Role" extends="Role">
        <collection property="resources" columnPrefix="re_" resultMap="Resource"/>
    </resultMap>

    <resultMap id="RoleQuery" type="com.wode.factory.supplier.query.RoleQuery">
        <result property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="description" column="description"/>
        <result property="supplierId" column="supplier_id"/>
        <result property="userName" column="user_name"/>
        <result property="userId" column="user_id"/>
        <result property="phone" column="phone"/>
        <result property="email" column="email"/>
        <result property="nickName" column="nickName"/>
        <result property="realName" column="realName"/>
        <collection property="user" ofType="com.wode.factory.model.UserFactory">
	        <id property="id" column="l_user_id"/>
	        <result property="userName" column="l_user_name"/>
	        <result property="phone" column="l_phone"/>
	        <result property="email" column="l_email"/>
	        <result property="nickName" column="l_nick_name"/>
	        <result property="realName" column="l_real_name"/>
	   </collection>
    </resultMap>

    <!-- 用于select查询公用抽取的列 -->
    <sql id="columns">
	    <![CDATA[
		id,user_name,email,phone,type,address,login_time,creat_time,status,avatar,birthday,nick_name,real_name,usable,user_signature,user_level,enabled,role,supplierId,employee_type,shop_link
        ,province,city,district,gender
        ]]>
	</sql>

    <!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO t_user (
        id ,
        user_name ,
        email ,
        phone ,
        type ,
        address ,
        login_time ,
        creat_time ,
        status ,
        supplierId,
        avatar ,
        birthday ,
        nick_name ,
        real_name ,
        usable ,
        user_signature ,
        user_level ,
        enabled,
        employee_type
        <if test="@Ognl@isNotEmpty(role)">
            ,role
        </if>
        ,shop_link
        ) VALUES (
        #{id} ,
        #{userName} ,
        #{email} ,
        #{phone} ,
        #{type} ,
        #{address} ,
        #{loginTime} ,
        #{creatTime} ,
        #{status} ,
        #{supplierId},
        #{avatar} ,
        #{birthday} ,
        #{nickName} ,
        #{realName} ,
        #{usable} ,
        #{userSignature} ,
        #{userLevel} ,
        #{enabled},
        #{employeeType}
        <if test="@Ognl@isNotEmpty(role)">
            ,#{role}
        </if>
        ,#{shopLink}
        )
        <!--
            oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL
            DB2: order="BEFORE"" values nextval for sequenceName
        <selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
            SELECT sequenceName.nextval AS ID FROM DUAL
        </selectKey>
        -->
    </insert>

    <update id="update">
        UPDATE t_user
        <set>
         <if test="userName != null">
	        user_name = #{userName} ,
         </if>
         <if test="email != null">
	        email = #{email} ,
         </if>
         <if test="phone != null">
	        phone = #{phone} ,
         </if>
         <if test="type != null">
	        type = #{type} ,
         </if>
         <if test="address != null">
	        address = #{address} ,
         </if>
         <if test="loginTime != null">
	        login_time = #{loginTime} ,
         </if>
         <if test="creatTime != null">
	        creat_time = #{creatTime} ,
         </if>
         <if test="nickName != null">
	        nick_name = #{nickName} ,
         </if>
         <if test="realName != null">
	        real_name = #{realName} ,
         </if>
         <if test="employeeType != null">
	        employee_type = #{employeeType} ,
         </if>
	        supplierId = #{supplierId} ,
        <if test="@Ognl@isNotEmpty(avatar)">
        	avatar = #{avatar} ,
        </if>
        <if test="@Ognl@isNotEmpty(province)">
        	province = #{province} ,
        </if>
        <if test="@Ognl@isNotEmpty(city)">
       		city = #{city} ,
        </if>
        <if test="@Ognl@isNotEmpty(district)">
        	district = #{district} ,
        </if>
        <if test="@Ognl@isNotEmpty(gender)">
        	gender = #{gender} ,
        </if>
         <if test="role != null">
	        role = #{role}
         </if>
	       ,shop_link = #{shopLink} ,
        </set>
        WHERE
        id = #{id}
    </update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM t_user WHERE
        id = #{id} 
        ]]>
    </delete>

    <select id="getById" resultMap="User">
        SELECT
        <include refid="columns"/>
        <![CDATA[
		    FROM t_user 
	        WHERE 
		        id = #{id} 
	    ]]>
    </select>

    <select id="getByEmailNew" resultMap="User">
        SELECT
        <include refid="columns"/>
        <![CDATA[
		    FROM t_user 
	        WHERE email = #{toEmail} 
	    ]]>
    </select>

    <select id="getByEmail" resultMap="User">
        SELECT
        <include refid="columns"/>
        <![CDATA[
		    FROM t_user 
	        WHERE 
		        email = #{toEmail} 
		        AND type = 2
		        AND usable = 1
	    ]]>
    </select>

    <select id="getByPhone" resultMap="User">
        SELECT
        <include refid="columns"/>
        <![CDATA[
		    FROM t_user 
	        WHERE 
		        phone = #{phone} 
	    ]]>
    </select>
    <select id="getByUserName" resultMap="User">
        SELECT
        <include refid="columns"/>
        <![CDATA[
		    FROM t_user 
	        WHERE 
		        user_name = #{userName} 
	    ]]>
    </select>

    <select id="findPage_count" resultType="long">
        SELECT count(*) FROM t_user
        <include refid="findPage_where"/>
    </select>

    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="User">
        SELECT
        <include refid="columns"/>
        FROM t_user
        <include refid="findPage_where"/>
    </select>


    <sql id="findPage_where">
        <!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
        <where>
            <if test="@Ognl@isNotEmpty(id)">
                AND id = #{id}
            </if>
            <if test="@Ognl@isNotEmpty(userName)">
                AND user_name = #{userName}
            </if>
            <if test="@Ognl@isNotEmpty(email)">
                AND email = #{email}
            </if>
            <if test="@Ognl@isNotEmpty(phone)">
                AND phone = #{phone}
            </if>
            <if test="@Ognl@isNotEmpty(type)">
                AND type = #{type}
            </if>
            <if test="@Ognl@isNotEmpty(address)">
                AND address = #{address}
            </if>
            <if test="@Ognl@isNotEmpty(status)">
                AND status = #{status}
            </if>
            <if test="@Ognl@isNotEmpty(avatar)">
                AND avatar = #{avatar}
            </if>
            <if test="@Ognl@isNotEmpty(nickName)">
                AND nick_name = #{nickName}
            </if>
            <if test="@Ognl@isNotEmpty(realName)">
                AND real_name = #{realName}
            </if>
            <if test="@Ognl@isNotEmpty(usable)">
                AND usable = #{usable}
            </if>
            <if test="@Ognl@isNotEmpty(userSignature)">
                AND user_signature = #{userSignature}
            </if>
            <if test="@Ognl@isNotEmpty(userLevel)">
                AND user_level = #{userLevel}
            </if>
            <if test="@Ognl@isNotEmpty(enabled)">
                AND enabled = #{enabled}
            </if>
            <if test="@Ognl@isNotEmpty(role)">
                AND role = #{role}
            </if>
            <if test="@Ognl@isNotEmpty(supplierId)">
                AND supplierId = #{supplierId}
            </if>
        </where>
    </sql>

    <insert id="addRole" useGeneratedKeys="true" keyProperty="id">
      INSERT  INTO t_roles
      (name, description, supplier_id, create_time, create_by, update_time, update_by)
      VALUES
      (#{name}, #{description}, #{supplierId}, #{createTime}, #{createBy}, #{updateTime}, #{updateBy})
    </insert>

    <delete id="deleteRole">
        DELETE FROM t_roles WHERE id = #{id} and supplier_id = #{supplierId}
    </delete>

    <update id="updateRole">
        UPDATE t_roles
        <set>
            <if test="name != null">
                name=#{name},
            </if>
            <if test="description != null">
                description = #{description},
            </if>
            <if test="supplierId != null">
                supplier_id = #{supplierId},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime},
            </if>
            <if test="updateBy != null">
                update_by = #{updateBy}
            </if>
        </set>
        where id = #{id}
    </update>

    <select id="getRole" resultMap="RoleWithResources">
        SELECT tr.id, tr.name, tr.description, tr.supplier_id, tre.id re_id, tre.name re_name, tre.description re_description
        FROM t_roles tr 
         LEFT JOIN t_role_resources trr ON tr.id = trr.role 
         LEFT JOIN t_resources tre ON tre.id = trr.resource
        <where>
            <trim prefixOverrides="and">
                <if test="supplierId != null">
                    tr.supplier_id = #{supplierId}
                </if>
                <if test="id != null">
                    and tr.id = #{id}
                </if>
            </trim>
        </where>
        order by trr.resource
    </select>

    <select id="selectRoles" resultMap="Role">
        SELECT id, name, description, supplier_id FROM t_roles
        <where>
            <trim prefixOverrides="and">
                <if test="supplierId != null">
                    supplier_id = #{supplierId}
                </if>
                <if test="id != null">
                    and id = #{id}
                </if>
                <if test="name != null">
                    and name = #{name}
                </if>
            </trim>
        </where>
    </select>

    <select id="selectUserName" resultMap="RoleQuery">
        SELECT r.*,u.user_name,u.id as user_id,u.phone,u.email,u.nick_name as nickName,u.real_name as realName FROM t_user u LEFT JOIN t_roles r on r.id = u.role and r.supplier_id = u.supplierId and u.type=3
        <where>
            <if test="@Ognl@isNotEmpty(id)">
                AND r.id = #{id}
            </if>
            <if test="@Ognl@isNotEmpty(name)">
                AND r.name = #{name}
            </if>
            <if test="@Ognl@isNotEmpty(supplierId)">
                AND r.supplier_id = #{supplierId}
            </if>
            <if test="@Ognl@isNotEmpty(userName)">
                AND u.user_name = #{userName}
            </if>
            <if test="@Ognl@isNotEmpty(userId)">
                AND u.id = #{userId}
            </if>
        </where>
    </select>
    <select id="selectRole" resultMap="RoleQuery">
        SELECT r.*,u.id as l_user_id,u.user_name as l_user_name,u.phone as l_phone,u.email as l_email,u.nick_name as l_nick_name,u.real_name as l_real_name FROM t_roles r LEFT JOIN t_user u on r.id = u.role and r.supplier_id = u.supplierId and u.type=3
        <where>
            <if test="@Ognl@isNotEmpty(id)">
                AND r.id = #{id}
            </if>
            <if test="@Ognl@isNotEmpty(name)">
                AND r.name = #{name}
            </if>
            <if test="@Ognl@isNotEmpty(supplierId)">
                AND r.supplier_id = #{supplierId}
            </if>
            <if test="@Ognl@isNotEmpty(userName)">
                AND u.user_name = #{userName}
            </if>
            <if test="@Ognl@isNotEmpty(userId)">
                AND u.id = #{userId}
            </if>
        </where>
    </select>
    
    <insert id="insertAuthResource">
        INSERT INTO t_role_resources (
        role,
        resource,
        create_time
        ) VALUES (
        #{role} ,
        #{resource} ,
        #{createTime}
        )
    </insert>

    <delete id="deleteAuthResource" parameterType="hashmap">
        DELETE FROM t_role_resources WHERE 1=1
        <if test="@Ognl@isNotEmpty(role)">
            and role = #{role} 
        </if>
        <if test="@Ognl@isNotEmpty(resource)">
            and resource = #{resource}
        </if>
    </delete>

    <select id="getAuth" resultType="com.wode.factory.model.Resource">
        SELECT re.id id, re.name name, re.uri uri, re.description description, re.ancestor ancestor, re.parent parent from t_user u LEFT join t_role_resources rr ON rr.role = u.role LEFT  JOIN t_resources re ON re.id = rr.resource
        WHERE u.id = #{uid} and u.type = 3
    </select>
</mapper>

