<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="AttachmentMapper">

	<resultMap id="Attachment" type="com.wode.factory.model.Attachment">
        <result property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="relatedId" column="relatedId"/>
        <result property="supplierId" column="supplierId"/>
        <result property="shopId" column="shop_id"/>
        <result property="type" column="type"/>
        <result property="userId" column="userId"/>
        <result property="createDate" column="createDate"/>
        <result property="endDate" column="endDate"/>
        <result property="relatedType" column="relatedType"/>
        <result property="size" column="size"/>
        <result property="url" column="url"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
		id,name,relatedId,supplierId,shop_id,type,userId,createDate,endDate,relatedType,size,url
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO t_attachment (
        	id ,
        	name ,
        	relatedId ,
        	supplierId ,
        	shop_id ,
        	type ,
        	userId ,
        	createDate ,
        	endDate ,
        	relatedType ,
        	size,url
        ) VALUES (
        	#{id} ,
        	#{name} ,
        	#{relatedId} ,
        	#{supplierId} ,
        	#{shopId} ,
        	#{type} ,
        	#{userId} ,
        	#{createDate} ,
        	#{endDate} ,
        	#{relatedType} ,
        	#{size} ,
        	#{url}
        )
    ]]>
	</insert>
    
    <insert id="copyByShop">
    <![CDATA[
        INSERT INTO t_attachment (
        	id ,
        	name ,
        	relatedId ,
        	supplierId ,
        	shop_id ,
        	type ,
        	userId ,
        	createDate ,
        	endDate ,
        	relatedType ,
        	size,url
        ) 
       SELECT  
        	nextval('t_attachment') id,
        	name ,
        	relatedId ,
        	supplierId,
        	#{shopId} shop_id ,
        	type ,
        	userId ,
        	createDate ,
        	endDate ,
        	relatedType ,
        	size,url
       FROM t_attachment 
       WHERE supplierId=#{supplierId} AND shop_id = #{oldId}
    ]]>
	</insert>
	
	
	<update id="update" >
    <![CDATA[
        UPDATE t_attachment SET
	        name = #{name} ,
	        relatedId = #{relatedId} ,
	        supplierId = #{supplierId} ,
	        shop_id = #{shopId} ,
	        type = #{type} ,
	        userId = #{userId} ,
	        createDate = #{createDate} ,
	        endDate = #{endDate} ,
	        relatedType = #{relatedType} ,
	        size = #{size} ,
	        url=#{url}
        WHERE 
	        id = #{id} 
    ]]>
	</update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM t_attachment WHERE
        id = #{id} 
    ]]>
    </delete>
        <delete id="removeAllBySupplierid">
		    <![CDATA[
		        DELETE FROM t_attachment WHERE
		        supplierId = #{supplierId} AND shop_id = #{shopId}
		    ]]>
    </delete>
    
    <select id="getById" resultMap="Attachment">
		SELECT <include refid="columns" />
	    <![CDATA[
		    FROM t_attachment 
	        WHERE 
		        id = #{id} 
	    ]]>
	</select>
		
    <select id="findPage_count" resultType="long">
        SELECT count(*) FROM t_attachment 
		<include refid="findPage_where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="Attachment">
    	SELECT <include refid="columns" />
	    FROM t_attachment 
		<include refid="findPage_where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
	<sql id="findPage_where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND id = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(name)">
				AND name = #{name}
			</if>
	       <if test="@Ognl@isNotEmpty(relatedId)">
				AND relatedId = #{relatedId}
			</if>
	       <if test="@Ognl@isNotEmpty(supplierId)">
				AND supplierId = #{supplierId}
			</if>
	       <if test="@Ognl@isNotEmpty(shopId)">
				AND shop_id = #{shopId}
			</if>
	       <if test="@Ognl@isNotEmpty(type)">
				AND type = #{type}
			</if>
	       <if test="@Ognl@isNotEmpty(userId)">
				AND userId = #{userId}
			</if>
	       <if test="@Ognl@isNotEmpty(createDateBegin)">
				AND createDate >= #{createDateBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(createDateEnd)">
				AND createDate &lt;= #{createDateEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(endDateBegin)">
				AND endDate >= #{endDateBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(endDateEnd)">
				AND endDate &lt;= #{endDateEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(relatedType)">
				AND relatedType = #{relatedType}
			</if>
	       <if test="@Ognl@isNotEmpty(size)">
				AND size = #{size}
			</if>
			<if test="@Ognl@isNotEmpty(url)">
				AND size = #{url}
			</if>
		</where>
	</sql>
	
	    <select id="findAllBymap" resultMap="Attachment">
	    	SELECT <include refid="columns" />
		    FROM t_attachment 
			<include refid="findPage_where"/>
			<if test="@Ognl@isNotEmpty(sortColumns)">
				ORDER BY ${sortColumns}
			</if>
	    </select>
	
	
	
	
</mapper>

