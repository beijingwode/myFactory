<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="BrandProducttypeMapper">

	<resultMap id="BrandProducttype" type="com.wode.factory.model.BrandProducttype">
        <result property="id" column="id"/>
        <result property="categoryId" column="category_id"/>
        <result property="brandId" column="brand_id"/>
        <result property="supplierId" column="supplier_id"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
		id,category_id,brand_id,supplier_id
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO t_brand_producttype (
        	id ,
        	category_id ,
        	brand_id ,
        	supplier_id 
        ) VALUES (
        	#{id} ,
        	#{categoryId} ,
        	#{brandId} ,
        	#{supplierId} 
        )
    ]]>
	</insert>
    
    <insert id="copyByShop">
    <![CDATA[
       INSERT INTO t_brand_producttype (
        	id ,
        	category_id ,
        	brand_id ,
        	supplier_id 
        ) 
       SELECT  
        	nextval('t_brand_producttype') id,
        	bp.category_id ,
        	b.id brand_id ,
        	bp.supplier_id 
       FROM t_brand_producttype bp
			 INNER JOIN t_product_brand b on ( bp.brand_id=b.old_id AND  bp.supplier_id=b.supplier_id)
       WHERE b.supplier_id=#{supplierId} AND b.shop_id = #{shopId}
    ]]>
	</insert>
	
	<update id="update" >
    <![CDATA[
        UPDATE t_brand_producttype SET
	        category_id = #{categoryId} ,
	        brand_id = #{brandId} ,
	        supplier_id = #{supplierId} 
        WHERE 
	        id = #{id} 
    ]]>
	</update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM t_brand_producttype WHERE
        id = #{id} 
    ]]>
    </delete>
    
    <delete id="deleteByShop">
    <![CDATA[
        DELETE FROM t_brand_producttype WHERE brand_id in (select id from t_product_brand where shop_id = #{shopId})
    ]]>
    </delete>
    
    <delete id="removeByMap">
    <![CDATA[
        DELETE FROM t_brand_producttype WHERE
        brand_id = #{brandId} and supplier_id = #{supplierId}
    ]]>
    </delete>
    
    <select id="getById" resultMap="BrandProducttype">
		SELECT <include refid="columns" />
	    <![CDATA[
		    FROM t_brand_producttype 
	        WHERE 
		        id = #{id} 
	    ]]>
	</select>
	
	<select id="findAllByMap" resultMap="BrandProducttype">
		SELECT <include refid="columns" />
	    <![CDATA[
		    FROM t_brand_producttype 
	        WHERE 
		        brand_id = #{brandId} and supplier_id = #{supplierId}
	    ]]>
	</select>
		
    <select id="findPage_count" resultType="long">
        SELECT count(*) FROM t_brand_producttype 
		<include refid="findPage_where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="BrandProducttype">
    	SELECT <include refid="columns" />
	    FROM t_brand_producttype 
		<include refid="findPage_where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
	<sql id="findPage_where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND id = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(categoryId)">
				AND category_id = #{categoryId}
			</if>
	       <if test="@Ognl@isNotEmpty(brandId)">
				AND brand_id = #{brandId}
			</if>
	       <if test="@Ognl@isNotEmpty(supplierId)">
				AND supplier_id = #{supplierId}
			</if>
		</where>
	</sql>
	
</mapper>

