<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="SupplierSpecificationMapper">

	<resultMap id="SupplierSpecification" type="com.wode.factory.model.SupplierSpecification">
        <result property="id" column="id"/>
        <result property="supplierId" column="supplier_id"/>
        <result property="name" column="name"/>
        <result property="orders" column="orders"/>
        <result property="memo" column="memo"/>
        <result property="type" column="type"/>
        <result property="categoryId" column="category_id"/>
        <result property="createdDate" column="createdDate"/>
        <result property="updateDate" column="updateDate"/>
        <result property="selectedId" column="selectedId"/><!-- 已经选择的id，只供显示 -->
        <result property="selectedInputType" column="selectedInputType"/><!-- 已经选择的类型，只供显示 -->
        <result property="selectedValue" column="selectedValue"/><!-- 已经选择的那个值，只供显示 -->
        <!-- 规格值list -->
        <collection property="valuelist" ofType="com.wode.factory.model.SpecificationValue">  
			<result property="id" column="id_val"/>
        	<result property="name" column="name_val"/>
        	<result property="image" column="image_val"/>
        	<result property="orders" column="orders_val"/>
		</collection>
		
		<!-- 该商品已选择的规格值list -->
        <collection property="productSpecificationValuelist" ofType="com.wode.factory.model.ProductSpecificationValue">  
		        <result property="specificationValue" column="specification_value_pro"/>
		</collection>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
		id,supplier_id,name,orders,memo,type,category_id,createdDate,updateDate
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO t_supplier_specification (
        	id ,
        	supplier_id ,
        	name ,
        	orders ,
        	memo ,
        	type ,
        	category_id ,
        	createdDate ,
        	updateDate 
        ) VALUES (
        	#{id} ,
        	#{supplierId} ,
        	#{name} ,
        	#{orders} ,
        	#{memo} ,
        	#{type} ,
        	#{categoryId} ,
        	#{createdDate} ,
        	#{updateDate} 
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="update" >
    <![CDATA[
        UPDATE t_supplier_specification SET
	        name = #{name} ,
	        orders = #{orders} ,
	        memo = #{memo} ,
	        type = #{type} ,
	        category_id = #{categoryId} ,
	        createdDate = #{createdDate} ,
	        updateDate = #{updateDate} 
        WHERE 
	        id = #{id} 
    ]]>
	</update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM t_supplier_specification WHERE
        id = #{id} 
    ]]>
    </delete>
    
    <select id="getById" resultMap="SupplierSpecification">
		SELECT <include refid="columns" />
	    <![CDATA[
		    FROM t_supplier_specification 
	        WHERE 
		        id = #{id} 
	    ]]>
	</select>
		
    <select id="getSpecificationByitemid" resultMap="SupplierSpecification">
		SELECT <include refid="columns" />
	    <![CDATA[
		    FROM t_supplier_specification 
	        WHERE 
		        id IN (select specification_id FROM t_product_specification_value where id=#{vid})
	    ]]>
	</select>
		
		
	<select id="selectByModel" resultMap="SupplierSpecification">
	    select 
	    <include refid="columns" />
	    from t_supplier_specification
		<include refid="findPage_where"/>
	</select>
	
    <select id="findPage_count" resultType="long">
        SELECT count(*) FROM t_supplier_specification 
		<include refid="findPage_where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="SupplierSpecification">
    	SELECT <include refid="columns" />
	    FROM t_supplier_specification 
		<include refid="findPage_where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
	<sql id="findPage_where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND id = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(name)">
				AND name = #{name}
			</if>
	       <if test="@Ognl@isNotEmpty(supplierId)">
				AND supplier_id = #{supplierId}
			</if>
	       <if test="@Ognl@isNotEmpty(orders)">
				AND orders = #{orders}
			</if>
	       <if test="@Ognl@isNotEmpty(memo)">
				AND memo = #{memo}
			</if>
	       <if test="@Ognl@isNotEmpty(type)">
				AND type = #{type}
			</if>
	       <if test="@Ognl@isNotEmpty(categoryId)">
				AND category_id = #{categoryId}
			</if>
		</where>
	</sql>
	
	<!-- 根据供应商id获取该供应商所有的用于生产sku的规格及其规格值 -->
	<select id="getSpecificationlistByCategoryid" resultMap="SupplierSpecification">
		SELECT spe.*,
		val.id as id_val,
		val.image as image_val,
		val.name as name_val,
		val.orders as orders_val,
		tpa.specification_value as specification_value_pro
		from t_supplier_specification as spe 
		LEFT JOIN t_specification_value as val ON spe.id=val.specification_id
		LEFT JOIN (SELECT * from t_product_specification_value WHERE product_id=#{productid} AND (isDelete is null or isDelete=0)) as tpa ON tpa.specification_id = spe.id
		WHERE spe.category_id = #{categoryid} and spe.supplier_id = #{supplierId}
        <if test="@Ognl@isNotEmpty(type)">
			AND spe.type = #{type}
		</if>
		ORDER BY spe.orders,val.orders
    </select>
    
    <select id="getOtherUseCount" resultType="Integer">
		SELECT
			count(1)
		FROM
			t_product_specification_value 
		WHERE
			specification_id=#{specificationId} AND specification_value=#{specificationValue} AND (isDelete is null or isDelete=0)
	    <![CDATA[
     		 AND NOT EXISTS (SELECT 1 FROM t_product p WHERE p.id=t_product_specification_value.product_id AND p.is_marketable = -10 )
      		 AND NOT EXISTS (SELECT 1 FROM t_appr_product p WHERE p.id=t_product_specification_value.product_id AND p.status = 2 )
			 AND product_id <> #{productId}
	    ]]>
	</select>
</mapper>

