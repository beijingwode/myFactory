<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="ProductParameterValueMapper">

	<resultMap id="ProductParameterValue" type="com.wode.factory.model.ProductParameterValue">
        <result property="id" column="id"/>
        <result property="productId" column="productId"/>
        <result property="parameterValue" column="parameter_value"/>
        <result property="parameterGroupId" column="parameter_group_id"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
		id,productId,parameter_value,parameter_group_id
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO t_product_parameter_value (
        	id ,
        	productId ,
        	parameter_value ,
        	parameter_group_id 
        ) VALUES (
        	#{id} ,
        	#{productId} ,
        	#{parameterValue} ,
        	#{parameterGroupId}
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="update" >
    <![CDATA[
        UPDATE t_product_parameter_value SET
	        productId = #{productId} ,
	        parameter_value = #{parameterValue} ,
	        parameter_group_id = #{parameterGroupId} 
	        input_type = #{inputType}
        WHERE 
	        id = #{id} 
    ]]>
	</update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM t_product_parameter_value WHERE
        id = #{id} 
    ]]>
    </delete>
    
        
        <delete id="removeAllByProductid">
		    <![CDATA[
		         DELETE FROM t_product_parameter_value WHERE
		        productId = #{productid} 
	    	]]>
    	</delete>
    
    <select id="getById" resultMap="ProductParameterValue">
		SELECT <include refid="columns" />
	    <![CDATA[
		    FROM t_product_parameter_value 
	        WHERE 
		        id = #{id} 
	    ]]>
	</select>
	
	
	 <select id="getByProductId" resultMap="ProductParameterValue">
		SELECT <include refid="columns" />
	    <![CDATA[
		    FROM t_product_parameter_value 
	        WHERE 
		        productId = #{productId} 
	    ]]>
	</select>
		
    <select id="findPage_count" resultType="long">
        SELECT count(*) FROM t_product_parameter_value 
		<include refid="findPage_where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="ProductParameterValue">
    	SELECT <include refid="columns" />
	    FROM t_product_parameter_value 
		<include refid="findPage_where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
	<sql id="findPage_where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND id = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(productId)">
				AND productId = #{productId}
			</if>
	       <if test="@Ognl@isNotEmpty(parameterValue)">
				AND parameter_value = #{parameterValue}
			</if>
	       <if test="@Ognl@isNotEmpty(parameterGroupId)">
				AND parameter_group_id = #{parameterGroupId}
			</if>
		</where>
	</sql>
	
</mapper>

