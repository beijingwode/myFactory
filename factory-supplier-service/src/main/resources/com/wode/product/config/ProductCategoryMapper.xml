<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="ProductCategoryMapper">

	<resultMap id="ProductCategory" type="com.wode.factory.model.ProductCategory">
        <result property="id" column="id"/>
        <result property="orders" column="orders"/>
        <result property="name" column="name"/>
        <result property="createDate" column="createDate"/>
        <result property="updateDate" column="updateDate"/>
        <result property="deep" column="deep"/>
        <result property="root" column="root"/>
        <result property="url" column="url"/>
        <result property="rootId" column="rootId"/>
        <result property="brotherOrderAll" column="brotherOrderAll"/>
        <result property="childCount" column="childCount"/>
        <result property="pid" column="pid"/>
        <result property="commissionScale" column="commissionScale"/>
        
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
		id,orders,name,createDate,updateDate,deep,root,url,rootId,brotherOrderAll,childCount,pid,commissionScale
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO t_product_category (
        	id ,
        	orders ,
        	name ,
        	createDate ,
        	updateDate ,
        	deep ,
        	root ,
        	url ,
        	rootId ,
        	brotherOrderAll ,
        	childCount ,
        	pid ,
        	commissionScale
        ) VALUES (
        	#{id} ,
        	#{orders} ,
        	#{name} ,
        	#{createDate} ,
        	#{updateDate} ,
        	#{deep} ,
        	#{root} ,
        	#{url} ,
        	#{rootId} ,
        	#{brotherOrderAll} ,
        	#{childCount} ,
        	#{pid} ,
        	#{commissionScale}
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="update" >
    <![CDATA[
        UPDATE t_product_category SET
	        orders = #{orders} ,
	        name = #{name} ,
	        createDate = #{createDate} ,
	        updateDate = #{updateDate} ,
	        deep = #{deep} ,
	        root = #{root} ,
	        url = #{url} ,
	        rootId = #{rootId} ,
	        brotherOrderAll = #{brotherOrderAll} ,
	        childCount = #{childCount} ,
	        pid = #{pid} ,
	        commissionScale=#{commissionScale}
        WHERE 
	        id = #{id} 
    ]]>
	</update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM t_product_category WHERE
        id = #{id} 
    ]]>
    </delete>
    
    <select id="getById" resultMap="ProductCategory">
		SELECT <include refid="columns" />
	    <![CDATA[
		    FROM t_product_category 
	        WHERE 
		        id = #{id} 
	    ]]>
	</select>
		
    <select id="findPage_count" resultType="long">
        SELECT count(*) FROM t_product_category 
		<include refid="findPage_where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="ProductCategory">
    	SELECT <include refid="columns" />
	    FROM t_product_category 
		<include refid="findPage_where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
	<sql id="findPage_where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND id = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(orders)">
				AND orders = #{orders}
			</if>
	       <if test="@Ognl@isNotEmpty(name)">
				AND name = #{name}
			</if>
	       <if test="@Ognl@isNotEmpty(createDateBegin)">
				AND createDate >= #{createDateBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(createDateEnd)">
				AND createDate &lt;= #{createDateEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(updateDateBegin)">
				AND updateDate >= #{updateDateBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(updateDateEnd)">
				AND updateDate &lt;= #{updateDateEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(deep)">
				AND deep = #{deep}
			</if>
	       <if test="@Ognl@isNotEmpty(root)">
				AND root = #{root}
			</if>
	       <if test="@Ognl@isNotEmpty(url)">
				AND url = #{url}
			</if>
	       <if test="@Ognl@isNotEmpty(rootId)">
				AND rootId = #{rootId}
			</if>
	       <if test="@Ognl@isNotEmpty(brotherOrderAll)">
				AND brotherOrderAll = #{brotherOrderAll}
			</if>
	       <if test="@Ognl@isNotEmpty(childCount)">
				AND childCount = #{childCount}
			</if>
	       <if test="@Ognl@isNotEmpty(pid)">
				AND pid = #{pid}
			</if>
		</where>
	</sql>
	
	<select id="getProductCategoryListByparentid" resultMap="ProductCategory">
    	SELECT <include refid="columns" />
	    FROM t_product_category 
	    where 1=1 
	    <if test="@Ognl@isNotEmpty(deep)">
		     and deep = #{deep}
	    </if>
	    <if test="@Ognl@isNotEmpty(pidslist)">
		     and pid in
			<foreach collection="pidslist" index="index" item="item" open="(" separator="," close=")">
				#{item}
			</foreach>
	    </if>
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>
</mapper>

