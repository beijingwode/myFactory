<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans" xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

    <description></description>

    <context:component-scan base-package="com.wode"/>

    <context:annotation-config/>

    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <!-- 静态资源映射 -->
    <!-- <mvc:resources mapping="/images/**" location="/resources/images/"/>
        <mvc:resources mapping="/css/**" location="/resources/css/"/> <mvc:resources
        mapping="/js/**" location="/resources/js/"/> -->

    <!-- 多语言 -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <!-- 在web环境中一定要定位到classpath 否则默认到当前web应用下找 -->
                <value>
                    classpath:message
                </value>
                <value>
                    classpath:error
                </value>
                <value>
                    classpath:ValidationMessages
                </value>
                <value>
                    classpath:SystemVariable
                </value>
                <value>
                    classpath:application
                </value>
            </list>
        </property>

        <property name="defaultEncoding" value="UTF-8"/>
        <property name="cacheSeconds" value="60"/>
    </bean>
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"/>
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"></bean>

    <!-- 加载配置 -->
    <bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:application.properties</value>
            </list>
        </property>
    </bean>

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="properties" ref="configProperties"/>
    </bean>

    <!-- ibatis config -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>

        <property name="validationQuery" value="${druid.validationQuery}"/>
        <property name="testWhileIdle" value="${druid.testWhileIdle}"/>
        <property name="testOnBorrow" value="${druid.testOnBorrow}"/>
        <property name="testOnReturn" value="${druid.testOnReturn}"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小  如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。-->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${druid.maxPoolPreparedStatementPerConnectionSize}"/>

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${druid.filters}"/>
    </bean>

    <bean id="NutDao" class="org.nutz.dao.impl.NutDao">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 事务处理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>

    </bean>

    <aop:config>
        <aop:pointcut id="baseServiceMethods" expression="execution(* com.wode.*.service.*.*(..)) or execution(* com.wode.*.facade.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="baseServiceMethods"/>
    </aop:config>

    <aop:aspectj-autoproxy/>

    <!-- 事务拦截 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="select*" read-only="true" propagation="REQUIRED"/>
            <tx:method name="find*" read-only="true" propagation="REQUIRED"/>
            <tx:method name="*" propagation="REQUIRED" isolation="SERIALIZABLE"
                       rollback-for="java.lang.Exception, SQLException"/>

        </tx:attributes>
    </tx:advice>

    <!-- Spring iBatis SqlMapClient -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:SqlMapConfig.xml"/>
        <!-- <property name="configLocation" value=""/> -->
        <!-- 该属性用来指定MyBatis的XML配置文件路径,跟Spring整合时，编写MyBatis映射文件的目的无非是配置一下typeAlias、setting之类的
        元素。不用在其中指定数据源，或者事务处理方式。就算配置了也会被忽略。因为这些都是使用Spring中的配置 。当然如果你不打算添加typeAlias
        之类的设置的话，你连MyBatis的配置文件都不用写，更不用配置这个属性了-->

        <property name="mapperLocations" value="classpath*:/com/wode/**/config/*Mapper.xml"/>
        <!-- 该配置文件用来指定Mapper映射文件的位置 ，如果映射文件与相应的接口同名，且在同一路径下，那么可以不配置该选项-->
    </bean>
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.wode.pay.dao"/>
    </bean>
    <!-- 
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">		
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
 	-->
    <bean name="redisClusterPoolConfig" class="org.apache.commons.pool2.impl.GenericObjectPoolConfig">
        <property name="maxWaitMillis" value="-1"/>
        <property name="maxTotal" value="1000"/>
        <property name="minIdle" value="8"/>
        <property name="maxIdle" value="100"/>
    </bean>

    <!--
     <bean id="redisUtil" class="com.wode.common.redis.RedisUtil"> <property
        name="jedisPool" ref="jedisPool" /> </bean>
         -->
    <!--
<bean id="redisUtilEx" class="com.wode.common.redis.RedisUtilEx">
    <property name="edis" ref="redisUtil" /> </bean>
     -->
    <!-- 配置多客户端，此处不要删除，shardedJedisPool获得的是ShardeJedis 其中缺少sorted set的秋交集方法可以和非切片redis一起使用 -->
    <!-- <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxActive" value="50" /> <property name="maxIdle" value="10"
        /> <property name="maxWait" value="1000" /> <property name="testOnBorrow"
        value="true"/> </bean> <bean id="jedis.shardInfo" class="redis.clients.jedis.JedisShardInfo">
        <constructor-arg index="0" value="${redis.server}" /> <constructor-arg index="1"
        value="${redis.port}" type="int"/> </bean> <bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool">
        <constructor-arg index="0" ref="jedisPoolConfig" /> <constructor-arg index="1">
        <list> <ref bean="jedis.shardInfo" /> </list> </constructor-arg> </bean>
        <bean id="redisUtil" class="com.palm360.airport.redis.RedisUtil"> <property
        name="shardedJedisPool" ref="shardedJedisPool"></property> </bean> -->
    <!-- 错误输出读取 -->
    <!-- <bean id="errorMessage" class="org.springframework.context.support.ResourceBundleMessageSource"
        > <property name="basenames" > <list> <value> error </value> </list> </property>
        </bean> -->

    <!-- 配置异常处理 -->
    <bean class="com.wode.common.exception.WodeExceptionResolver">

        <!-- 定义默认的异常处理页面，当该异常类型的注册时使用 -->
        <!-- <property name="defaultErrorView" value="error"></property> -->
        <!-- 定义异常处理页面用来获取异常信息的变量名，默认名为exception -->
        <!--<property name="exceptionAttribute" value="ex"></property> -->

        <!-- 定义需要特殊处理的异常，用类名或完全路径名作为key，异常也页名作为值 -->
        <!-- <property name="exceptionMappings"> <props> <prop key="IOException">error/ioexp</prop>
            <prop key="java.sql.SQLException">error/sqlexp</prop> </props> </property> -->
    </bean>

    <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="beanNames">
            <list>
                <value>*Service</value>
            </list>
        </property>
        <property name="interceptorNames">
            <list>
                <idref bean="StorageDbResult"/>
            </list>
        </property>
    </bean>
    <bean id="StorageDbResult" class="com.wode.common.redis.StorageDbResult"></bean>

    <!-- 静态页模板页面配置-->
    <bean id="pagePathMap" class="java.util.HashMap">
        <constructor-arg>
            <map>
                <entry key="index" value="${index_path}"/>
                <entry key="index_m" value="${index_path_m}"/>
                <entry key="channel" value="${channel_path}"/>
                <entry key="product" value="${product_path}"/>
                <entry key="category" value="${category_path}"/>
            </map>
        </constructor-arg>
    </bean>

    <!-- elasticsearch client configuration -->
    <bean id="SearchClientFactory" class="com.wode.search.SearchClientFactory" scope="singleton">
		<property name="ipAddress" value="${search.ip}"/>
    </bean>
    
    <bean id="searchManager" class="com.wode.search.WodeSearchManager" scope="singleton">
		<property name="searchClientFactory" ref="SearchClientFactory"/>
		<property name="index" value="wode"/>
		<property name="keyIndex" value="product_key"/>
        <property name="type" value="product"/>
        <property name="pageSize" value="20"/>
        <!-- 配置关键字搜索时都匹配那些字段, 如不设置, 将匹配全部字段 -->
        <property name="searchFields">
            <list>
                <value>name</value>
                <value>categoryName</value>
                <value>shopName</value>
                <value>barcode</value>
            </list>
        </property>
    </bean>

</beans>