<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="PromotionMapper">

	<resultMap id="Promotion" type="com.wode.factory.model.Promotion">
        <result property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="orders" column="orders"/>
        <result property="beginDate" column="begin_date"/>
        <result property="endDate" column="end_date"/>
        <result property="introduction" column="introduction"/>
        <result property="freeShipping" column="free_shipping"/>
        <result property="minPrice" column="min_price"/>
        <result property="minQuantity" column="min_quantity"/>
        <result property="exclusive" column="exclusive"/>
        <result property="shopId" column="shop_id"/>
        <result property="rule" column="rule"/>
        <result property="joinTotal" column="join_total"/>
        <result property="status" column="status"/>
        <result property="type" column="type"/>
        <result property="createDate" column="create_date"/>
        <result property="modifyDate" column="modify_date"/>
        <result property="canReturn" column="can_return"/>
        <result property="canReplace" column="can_replace"/>
        <result property="canRepair" column="can_repair"/>
        <result property="notice" column="notice"/>
        <result property="stockShared" column="stockShared"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
		id,name,orders,begin_date,end_date,introduction,free_shipping,min_price,min_quantity,exclusive,shop_id,rule,join_total,status,type,create_date,modify_date,can_return,can_replace,can_repair,notice,stockShared
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO t_promotion (
        	id ,
        	name ,
        	orders ,
        	begin_date ,
        	end_date ,
        	introduction ,
        	free_shipping ,
        	min_price ,
        	min_quantity ,
        	exclusive ,
        	shop_id ,
        	rule ,
        	join_total ,
        	status ,
        	type ,
        	create_date ,
        	modify_date ,
        	can_return ,
        	can_replace ,
        	can_repair ,
        	notice ,
        	stockShared 
        ) VALUES (
        	#{id} ,
        	#{name} ,
        	#{orders} ,
        	#{beginDate} ,
        	#{endDate} ,
        	#{introduction} ,
        	#{freeShipping} ,
        	#{minPrice} ,
        	#{minQuantity} ,
        	#{exclusive} ,
        	#{shopId} ,
        	#{rule} ,
        	#{joinTotal} ,
        	#{status} ,
        	#{type} ,
        	#{createDate} ,
        	#{modifyDate} ,
        	#{canReturn} ,
        	#{canReplace} ,
        	#{canRepair} ,
        	#{notice} ,
        	#{stockShared} 
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="update" >
    <![CDATA[
        UPDATE t_promotion SET
	        name = #{name} ,
	        orders = #{orders} ,
	        begin_date = #{beginDate} ,
	        end_date = #{endDate} ,
	        introduction = #{introduction} ,
	        free_shipping = #{freeShipping} ,
	        min_price = #{minPrice} ,
	        min_quantity = #{minQuantity} ,
	        exclusive = #{exclusive} ,
	        shop_id = #{shopId} ,
	        rule = #{rule} ,
	        join_total = #{joinTotal} ,
	        status = #{status} ,
	        type = #{type} ,
	        create_date = #{createDate} ,
	        modify_date = #{modifyDate} ,
	        can_return = #{canReturn} ,
	        can_replace = #{canReplace} ,
	        can_repair = #{canRepair} ,
	        notice = #{notice} ,
	        stockShared = #{stockShared} 
        WHERE 
	        id = #{id} 
    ]]>
	</update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM t_promotion WHERE
        id = #{id} 
    ]]>
    </delete>
    
    <select id="getById" resultMap="Promotion">
		SELECT <include refid="columns" />
	    <![CDATA[
		    FROM t_promotion 
	        WHERE 
		        id = #{id} 
	    ]]>
	</select>
		
    <select id="findPage_count" resultType="long">
        SELECT count(*) FROM t_promotion 
		<include refid="findPage_where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="Promotion">
    	SELECT <include refid="columns" />
	    FROM t_promotion 
		<include refid="findPage_where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
	<sql id="findPage_where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND id = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(name)">
				AND name = #{name}
			</if>
	       <if test="@Ognl@isNotEmpty(orders)">
				AND orders = #{orders}
			</if>
	       <if test="@Ognl@isNotEmpty(beginDateBegin)">
				AND begin_date >= #{beginDateBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(beginDateEnd)">
				AND begin_date &lt;= #{beginDateEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(endDateBegin)">
				AND end_date >= #{endDateBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(endDateEnd)">
				AND end_date &lt;= #{endDateEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(introduction)">
				AND introduction = #{introduction}
			</if>
	       <if test="@Ognl@isNotEmpty(freeShipping)">
				AND free_shipping = #{freeShipping}
			</if>
	       <if test="@Ognl@isNotEmpty(minPrice)">
				AND min_price = #{minPrice}
			</if>
	       <if test="@Ognl@isNotEmpty(minQuantity)">
				AND min_quantity = #{minQuantity}
			</if>
	       <if test="@Ognl@isNotEmpty(exclusive)">
				AND exclusive = #{exclusive}
			</if>
	       <if test="@Ognl@isNotEmpty(shopId)">
				AND shop_id = #{shopId}
			</if>
	       <if test="@Ognl@isNotEmpty(rule)">
				AND rule = #{rule}
			</if>
	       <if test="@Ognl@isNotEmpty(joinTotal)">
				AND join_total = #{joinTotal}
			</if>
	       <if test="@Ognl@isNotEmpty(status)">
				AND status = #{status}
			</if>
	       <if test="@Ognl@isNotEmpty(type)">
				AND type = #{type}
			</if>
	       <if test="@Ognl@isNotEmpty(createDateBegin)">
				AND create_date >= #{createDateBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(createDateEnd)">
				AND create_date &lt;= #{createDateEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(modifyDateBegin)">
				AND modify_date >= #{modifyDateBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(modifyDateEnd)">
				AND modify_date &lt;= #{modifyDateEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(canReturn)">
				AND can_return = #{canReturn}
			</if>
	       <if test="@Ognl@isNotEmpty(canReplace)">
				AND can_replace = #{canReplace}
			</if>
	       <if test="@Ognl@isNotEmpty(canRepair)">
				AND can_repair = #{canRepair}
			</if>
	       <if test="@Ognl@isNotEmpty(notice)">
				AND notice = #{notice}
			</if>
	       <if test="@Ognl@isNotEmpty(stockShared)">
				AND stockShared = #{stockShared}
			</if>
		</where>
	</sql>
	
</mapper>

