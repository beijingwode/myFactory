<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper         PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"         "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="ReturnorderMapper">

    <resultMap id="Returnorder" type="com.wode.factory.model.Returnorder">
        <result property="returnOrderId" column="returnOrderId"/>
        <result property="subOrderId" column="subOrderId"/>
        <result property="returnPrice" column="returnPrice"/>
        <result property="status" column="status"/>
        <result property="expressType" column="expressType"/>
        <result property="expressNo" column="expressNo"/>
        <result property="reason" column="reason"/>
        <result property="note" column="note"/>
        <result property="createTime" column="createTime"/>
        <result property="updateTime" column="updateTime"/>
        <result property="updateBy" column="updateBy"/>
        <result property="lastTime" column="lastTime"/>
        <result property="userId" column="userId"/>
        <result property="goodsStatus" column="goods_status"/>
        <collection property="returnorderAttachmentList" ofType="com.wode.factory.model.ReturnorderAttachment">
			<result property="id" column="id"/>
	        <result property="image" column="image"/>
		</collection>
    </resultMap>

    <resultMap id="ReturnorderVo" type="com.wode.factory.user.vo.ReturnOrderVo">
        <result property="returnOrderId" column="returnOrderId"/>
        <result property="subOrderId" column="subOrderId"/>
        <result property="returnPrice" column="returnPrice"/>
        <result property="status" column="status"/>
        <result property="createTime" column="createTime"/>
        <result property="userId" column="userId"/>
        <result property="productName" column="productName"/>
        <result property="realPrice" column="realPrice"/>
    </resultMap>

    <!-- 用于select查询公用抽取的列 -->
    <sql id="columns">
	    <![CDATA[

		returnOrderId,subOrderId,returnPrice,status,expressType,expressNo,reason,note,createTime,updateTime,updateBy,lastTime,userId

        ]]>
	</sql>

    <!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
    <insert id="insert" useGeneratedKeys="true" keyProperty="returnOrderId">
        <![CDATA[
        INSERT INTO t_returnorder (
        	returnOrderId ,
        	subOrderId ,
        	returnPrice ,
        	status ,
        	expressType ,
        	expressNo ,
        	reason ,
        	note ,
        	createTime ,
        	updateTime ,
        	updateBy ,
        	lastTime ,
        	userId ,
        	goods_status
        	
        ) VALUES (
        	#{returnOrderId} ,
        	#{subOrderId} ,
        	#{returnPrice} ,
        	#{status} ,
        	#{expressType} ,
        	#{expressNo} ,
        	#{reason} ,
        	#{note} ,
        	#{createTime} ,
        	#{updateTime} ,
        	#{updateBy} ,
        	#{lastTime} ,
        	#{userId} ,
        	#{goodsStatus} 
        )
    ]]>
        <!--
            oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL
            DB2: order="BEFORE"" values nextval for sequenceName
        <selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
            SELECT sequenceName.nextval AS ID FROM DUAL
        </selectKey>
        -->
    </insert>

    <update id="update">
    <![CDATA[

        UPDATE t_returnorder SET
	        subOrderId = #{subOrderId} ,
	        returnPrice = #{returnPrice} ,
	        status = #{status} ,
	        expressType = #{expressType} ,
	        expressNo = #{expressNo} ,
	        reason = #{reason} ,
	        note = #{note} ,
	        createTime = #{createTime} ,
	        updateTime = #{updateTime} ,
	        updateBy = #{updateBy} ,
	        lastTime = #{lastTime} ,
	        userId = #{userId} ,
	        goods_status = #{goodsStatus}
        WHERE 
	        returnOrderId = #{returnOrderId} 

        ]]>
	</update>

    <delete id="delete">
    <![CDATA[

        DELETE FROM t_returnorder WHERE
        returnOrderId = #{id} 

        ]]>
    </delete>

    <select id="getById" resultMap="Returnorder">
        SELECT
        <include refid="columns"/>
        <![CDATA[
		    FROM t_returnorder 
	        WHERE 
		        returnOrderId = #{id} 
	    ]]>
    </select>

    <select id="findPage_count" resultType="long">
        SELECT count(*) FROM t_returnorder
        <include refid="findPage_where"/>
    </select>

    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="ReturnorderVo">
        SELECT tr.returnOrderId,tr.subOrderId,tsi.productName,tr.createTime,ts.realPrice,tr.returnPrice,tr.`status` FROM
        t_returnorder tr
        INNER JOIN t_suborder ts ON tr.subOrderId = ts.subOrderId
        INNER JOIN t_suborderitem tsi ON tsi.subOrderId = ts.subOrderId
        WHERE tr.userId = #{userId}
        <if test="@Ognl@isNotEmpty(status)">
            AND tr.status = #{status}
        </if>
    </select>


    <sql id="findPage_where">
        <!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
        <where>
            <if test="@Ognl@isNotEmpty(returnOrderId)">
                AND returnOrderId = #{returnOrderId}
            </if>
            <if test="@Ognl@isNotEmpty(subOrderId)">
                AND subOrderId = #{subOrderId}
            </if>
            <if test="@Ognl@isNotEmpty(returnPrice)">
                AND returnPrice = #{returnPrice}
            </if>
            <if test="@Ognl@isNotEmpty(status)">
                AND status = #{status}
            </if>
            <if test="@Ognl@isNotEmpty(expressType)">
                AND expressType = #{expressType}
            </if>
            <if test="@Ognl@isNotEmpty(expressNo)">
                AND expressNo = #{expressNo}
            </if>
            <if test="@Ognl@isNotEmpty(reason)">
                AND reason = #{reason}
            </if>
            <if test="@Ognl@isNotEmpty(note)">
                AND note = #{note}
            </if>
            <if test="@Ognl@isNotEmpty(createTimeBegin)">
                AND createTime >= #{createTimeBegin}
            </if>
            <if test="@Ognl@isNotEmpty(createTimeEnd)">
                AND createTime &lt;= #{createTimeEnd}
            </if>
            <if test="@Ognl@isNotEmpty(updateTimeBegin)">
                AND updateTime >= #{updateTimeBegin}
            </if>
            <if test="@Ognl@isNotEmpty(updateTimeEnd)">
                AND updateTime &lt;= #{updateTimeEnd}
            </if>
            <if test="@Ognl@isNotEmpty(updateBy)">
                AND updateBy = #{updateBy}
            </if>
            <if test="@Ognl@isNotEmpty(lastTimeBegin)">
                AND lastTime >= #{lastTimeBegin}
            </if>
            <if test="@Ognl@isNotEmpty(lastTimeEnd)">
                AND lastTime &lt;= #{lastTimeEnd}
            </if>
            <if test="@Ognl@isNotEmpty(userId)">
                AND userId = #{userId}
            </if>
        </where>
    </sql>
    
	<select id="getReturnOrdersById" resultMap="Returnorder">
	SELECT ret.*,att.* from t_returnorder as ret 
		LEFT JOIN t_returnorder_attachment as att on att.returnOrderId=ret.returnOrderId
		WHERE ret.returnOrderId = #{returnOrderId} 
	</select>
</mapper>

