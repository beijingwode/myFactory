<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper         PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"         "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="ReturnorderItemMapper">

	<resultMap id="ReturnorderItem" type="com.wode.factory.model.Returnorderitem">
        <result property="returnOrderItemId" column="returnOrderItemId"/>
        <result property="returnOrderId" column="returnOrderId"/>
        <result property="partNumber" column="partNumber"/>
        <result property="number" column="number"/>
        <result property="price" column="price"/>
        <result property="createTime" column="createTime"/>
        <result property="updateTime" column="updateTime"/>
        <result property="updateBy" column="updateBy"/>
        <result property="subOrderItemId" column="sub_order_item_id"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
		returnOrderItemId,returnOrderId,partNumber,number,price,createTime,updateTime,updateBy,sub_order_item_id
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="returnOrderItemId">
    <![CDATA[
        INSERT INTO t_returnorder_item (
        	returnOrderItemId ,
        	returnOrderId ,
        	partNumber ,
        	number ,
        	price ,
        	createTime ,
        	updateTime ,
        	updateBy ,
        	sub_order_item_id
        ) VALUES (
        	#{returnOrderItemId} ,
        	#{returnOrderId} ,
        	#{partNumber} ,
        	#{number} ,
        	#{price} ,
        	#{createTime} ,
        	#{updateTime} ,
        	#{updateBy} ,
        	#{subOrderItemId}
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="update" >
    <![CDATA[
        UPDATE t_returnorder_item SET
	        returnOrderId = #{returnOrderId} ,
	        partNumber = #{partNumber} ,
	        number = #{number} ,
	        price = #{price} ,
	        createTime = #{createTime} ,
	        updateTime = #{updateTime} ,
	        updateBy = #{updateBy} ,
	        sub_order_item_id = #{subOrderItemId}
        WHERE 
	        returnOrderItemId = #{returnOrderItemId} 
    ]]>
	</update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM t_returnorder_item WHERE
        returnOrderItemId = #{id} 
    ]]>
    </delete>
    
    <select id="getById" resultMap="ReturnorderItem">
		SELECT <include refid="columns" />
	    <![CDATA[
		    FROM t_returnorder_item 
	        WHERE 
		        returnOrderItemId = #{id} 
	    ]]>
	</select>
		
    <select id="findPage_count" resultType="long">
        SELECT count(*) FROM t_returnorder_item 
		<include refid="findPage_where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="ReturnorderItem">
    	SELECT <include refid="columns" />
	    FROM t_returnorder_item 
		<include refid="findPage_where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
	<sql id="findPage_where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(returnOrderItemId)">
				AND returnOrderItemId = #{returnOrderItemId}
			</if>
	       <if test="@Ognl@isNotEmpty(returnOrderId)">
				AND returnOrderId = #{returnOrderId}
			</if>
	       <if test="@Ognl@isNotEmpty(partNumber)">
				AND partNumber = #{partNumber}
			</if>
	       <if test="@Ognl@isNotEmpty(number)">
				AND number = #{number}
			</if>
	       <if test="@Ognl@isNotEmpty(price)">
				AND price = #{price}
			</if>
	       <if test="@Ognl@isNotEmpty(createTimeBegin)">
				AND createTime >= #{createTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(createTimeEnd)">
				AND createTime &lt;= #{createTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(updateTimeBegin)">
				AND updateTime >= #{updateTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(updateTimeEnd)">
				AND updateTime &lt;= #{updateTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(updateBy)">
				AND updateBy = #{updateBy}
			</if>
			<if test="@Ognl@isNotEmpty(subOrderItemId)">
				AND sub_order_item_id = #{subOrderItemId}
			</if>
		</where>
	</sql>
	
</mapper>

